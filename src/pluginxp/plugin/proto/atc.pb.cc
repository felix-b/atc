// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atc.proto

#include "atc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AircraftMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AircraftMessage_Situation_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AirportMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_CancelTrafficQuery_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_Connect_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_CreateAircraft_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_QueryAirport_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_QueryTaxiPath_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_QueryTraffic_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_RemoveAircraft_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserAcquireAircraft_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserPttPressed_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserPttReleased_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserReleaseAircraft_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPoint_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_GeoEdge_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingStandMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunwayMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunwayMessage_End_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultDeclined_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultNotFound_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyConnect_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryAirport_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiEdgeMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiNodeMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_atc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiPathMessage_atc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace atc_proto {
class ClientToServer_ConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_Connect> _instance;
} _ClientToServer_Connect_default_instance_;
class ClientToServer_QueryAirportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_QueryAirport> _instance;
} _ClientToServer_QueryAirport_default_instance_;
class ClientToServer_QueryTaxiPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_QueryTaxiPath> _instance;
} _ClientToServer_QueryTaxiPath_default_instance_;
class ClientToServer_CreateAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_CreateAircraft> _instance;
} _ClientToServer_CreateAircraft_default_instance_;
class ClientToServer_UpdateAircraftSituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UpdateAircraftSituation> _instance;
} _ClientToServer_UpdateAircraftSituation_default_instance_;
class ClientToServer_RemoveAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_RemoveAircraft> _instance;
} _ClientToServer_RemoveAircraft_default_instance_;
class ClientToServer_UserAcquireAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UserAcquireAircraft> _instance;
} _ClientToServer_UserAcquireAircraft_default_instance_;
class ClientToServer_UserUpdateAircraftSituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UserUpdateAircraftSituation> _instance;
} _ClientToServer_UserUpdateAircraftSituation_default_instance_;
class ClientToServer_UserReleaseAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UserReleaseAircraft> _instance;
} _ClientToServer_UserReleaseAircraft_default_instance_;
class ClientToServer_UserPttPressedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UserPttPressed> _instance;
} _ClientToServer_UserPttPressed_default_instance_;
class ClientToServer_UserPttReleasedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_UserPttReleased> _instance;
} _ClientToServer_UserPttReleased_default_instance_;
class ClientToServer_QueryTrafficDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_QueryTraffic> _instance;
} _ClientToServer_QueryTraffic_default_instance_;
class ClientToServer_CancelTrafficQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer_CancelTrafficQuery> _instance;
} _ClientToServer_CancelTrafficQuery_default_instance_;
class ClientToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer> _instance;
  const ::atc_proto::ClientToServer_Connect* connect_;
  const ::atc_proto::ClientToServer_QueryAirport* query_airport_;
  const ::atc_proto::ClientToServer_CreateAircraft* create_aircraft_;
  const ::atc_proto::ClientToServer_UpdateAircraftSituation* update_aircraft_situation_;
  const ::atc_proto::ClientToServer_RemoveAircraft* remove_aircraft_;
  const ::atc_proto::ClientToServer_QueryTaxiPath* query_taxi_path_;
  const ::atc_proto::ClientToServer_QueryTraffic* query_traffic_;
  const ::atc_proto::ClientToServer_CancelTrafficQuery* cancel_traffic_query_;
  const ::atc_proto::ClientToServer_UserAcquireAircraft* user_acquire_aircraft_;
  const ::atc_proto::ClientToServer_UserUpdateAircraftSituation* user_update_aircraft_situation_;
  const ::atc_proto::ClientToServer_UserReleaseAircraft* user_release_aircraft_;
  const ::atc_proto::ClientToServer_UserPttPressed* user_ptt_pressed_;
  const ::atc_proto::ClientToServer_UserPttReleased* user_ptt_released_;
} _ClientToServer_default_instance_;
class ServerToClient_FaultDeclinedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_FaultDeclined> _instance;
} _ServerToClient_FaultDeclined_default_instance_;
class ServerToClient_FaultNotFoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_FaultNotFound> _instance;
} _ServerToClient_FaultNotFound_default_instance_;
class ServerToClient_ReplyConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyConnect> _instance;
} _ServerToClient_ReplyConnect_default_instance_;
class ServerToClient_ReplyCreateAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyCreateAircraft> _instance;
} _ServerToClient_ReplyCreateAircraft_default_instance_;
class ServerToClient_ReplyQueryAirportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyQueryAirport> _instance;
} _ServerToClient_ReplyQueryAirport_default_instance_;
class ServerToClient_ReplyQueryTaxiPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyQueryTaxiPath> _instance;
} _ServerToClient_ReplyQueryTaxiPath_default_instance_;
class ServerToClient_ReplyQueryTrafficDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyQueryTraffic> _instance;
} _ServerToClient_ReplyQueryTraffic_default_instance_;
class ServerToClient_NotifyAircraftCreatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_NotifyAircraftCreated> _instance;
} _ServerToClient_NotifyAircraftCreated_default_instance_;
class ServerToClient_NotifyAircraftSituationUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_NotifyAircraftSituationUpdated> _instance;
} _ServerToClient_NotifyAircraftSituationUpdated_default_instance_;
class ServerToClient_NotifyAircraftRemovedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_NotifyAircraftRemoved> _instance;
} _ServerToClient_NotifyAircraftRemoved_default_instance_;
class ServerToClient_ReplyUserAcquireAircraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient_ReplyUserAcquireAircraft> _instance;
} _ServerToClient_ReplyUserAcquireAircraft_default_instance_;
class ServerToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient> _instance;
  const ::atc_proto::ServerToClient_ReplyConnect* reply_connect_;
  const ::atc_proto::ServerToClient_ReplyQueryAirport* reply_query_airport_;
  const ::atc_proto::ServerToClient_ReplyCreateAircraft* reply_create_aircraft_;
  const ::atc_proto::ServerToClient_ReplyQueryTaxiPath* reply_query_taxi_path_;
  const ::atc_proto::ServerToClient_ReplyQueryTraffic* reply_query_traffic_;
  const ::atc_proto::ServerToClient_NotifyAircraftCreated* notify_aircraft_created_;
  const ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated* notify_aircraft_situation_updated_;
  const ::atc_proto::ServerToClient_NotifyAircraftRemoved* notify_aircraft_removed_;
  const ::atc_proto::ServerToClient_ReplyUserAcquireAircraft* reply_user_acquire_aircraft_;
  const ::atc_proto::ServerToClient_FaultDeclined* fault_declined_;
  const ::atc_proto::ServerToClient_FaultNotFound* fault_not_found_;
} _ServerToClient_default_instance_;
class GeoPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPoint> _instance;
} _GeoPoint_default_instance_;
class GeoPolygon_GeoEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPolygon_GeoEdge> _instance;
} _GeoPolygon_GeoEdge_default_instance_;
class GeoPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPolygon> _instance;
} _GeoPolygon_default_instance_;
class Vector3dMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3dMessage> _instance;
} _Vector3dMessage_default_instance_;
class AttitudeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttitudeMessage> _instance;
} _AttitudeMessage_default_instance_;
class AirportMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AirportMessage> _instance;
} _AirportMessage_default_instance_;
class RunwayMessage_EndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunwayMessage_End> _instance;
} _RunwayMessage_End_default_instance_;
class RunwayMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunwayMessage> _instance;
} _RunwayMessage_default_instance_;
class TaxiNodeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiNodeMessage> _instance;
} _TaxiNodeMessage_default_instance_;
class TaxiEdgeMessage_ActiveZoneMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiEdgeMessage_ActiveZoneMatrix> _instance;
} _TaxiEdgeMessage_ActiveZoneMatrix_default_instance_;
class TaxiEdgeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiEdgeMessage> _instance;
} _TaxiEdgeMessage_default_instance_;
class ParkingStandMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingStandMessage> _instance;
} _ParkingStandMessage_default_instance_;
class AirspaceGeometryMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AirspaceGeometryMessage> _instance;
} _AirspaceGeometryMessage_default_instance_;
class AircraftMessage_SituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AircraftMessage_Situation> _instance;
} _AircraftMessage_Situation_default_instance_;
class AircraftMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AircraftMessage> _instance;
} _AircraftMessage_default_instance_;
class TaxiPathMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaxiPathMessage> _instance;
} _TaxiPathMessage_default_instance_;
}  // namespace atc_proto
static void InitDefaultsscc_info_AircraftMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_AircraftMessage_default_instance_;
    new (ptr) ::atc_proto::AircraftMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::AircraftMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AircraftMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AircraftMessage_atc_2eproto}, {
      &scc_info_AircraftMessage_Situation_atc_2eproto.base,}};

static void InitDefaultsscc_info_AircraftMessage_Situation_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_AircraftMessage_Situation_default_instance_;
    new (ptr) ::atc_proto::AircraftMessage_Situation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::AircraftMessage_Situation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AircraftMessage_Situation_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AircraftMessage_Situation_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,}};

static void InitDefaultsscc_info_AirportMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_AirportMessage_default_instance_;
    new (ptr) ::atc_proto::AirportMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::AirportMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AirportMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AirportMessage_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,
      &scc_info_RunwayMessage_atc_2eproto.base,
      &scc_info_ParkingStandMessage_atc_2eproto.base,
      &scc_info_TaxiNodeMessage_atc_2eproto.base,
      &scc_info_TaxiEdgeMessage_atc_2eproto.base,}};

static void InitDefaultsscc_info_AirspaceGeometryMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_AirspaceGeometryMessage_default_instance_;
    new (ptr) ::atc_proto::AirspaceGeometryMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::AirspaceGeometryMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AirspaceGeometryMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AirspaceGeometryMessage_atc_2eproto}, {
      &scc_info_GeoPolygon_atc_2eproto.base,}};

static void InitDefaultsscc_info_AttitudeMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_AttitudeMessage_default_instance_;
    new (ptr) ::atc_proto::AttitudeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::AttitudeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttitudeMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttitudeMessage_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_default_instance_;
    new (ptr) ::atc_proto::ClientToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_ClientToServer_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_ClientToServer_atc_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ClientToServer_Connect_atc_2eproto.base,
      &scc_info_ClientToServer_QueryAirport_atc_2eproto.base,
      &scc_info_ClientToServer_CreateAircraft_atc_2eproto.base,
      &scc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto.base,
      &scc_info_ClientToServer_RemoveAircraft_atc_2eproto.base,
      &scc_info_ClientToServer_QueryTaxiPath_atc_2eproto.base,
      &scc_info_ClientToServer_QueryTraffic_atc_2eproto.base,
      &scc_info_ClientToServer_CancelTrafficQuery_atc_2eproto.base,
      &scc_info_ClientToServer_UserAcquireAircraft_atc_2eproto.base,
      &scc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto.base,
      &scc_info_ClientToServer_UserReleaseAircraft_atc_2eproto.base,
      &scc_info_ClientToServer_UserPttPressed_atc_2eproto.base,
      &scc_info_ClientToServer_UserPttReleased_atc_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_CancelTrafficQuery_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_CancelTrafficQuery_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_CancelTrafficQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_CancelTrafficQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_CancelTrafficQuery_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_CancelTrafficQuery_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_Connect_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_Connect_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_Connect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_Connect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_Connect_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_Connect_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_CreateAircraft_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_CreateAircraft_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_CreateAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_CreateAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_CreateAircraft_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_CreateAircraft_atc_2eproto}, {
      &scc_info_AircraftMessage_atc_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_QueryAirport_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_QueryAirport_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_QueryAirport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_QueryAirport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_QueryAirport_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_QueryAirport_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_QueryTaxiPath_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_QueryTaxiPath_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_QueryTaxiPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_QueryTaxiPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_QueryTaxiPath_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_QueryTaxiPath_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_QueryTraffic_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_QueryTraffic_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_QueryTraffic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_QueryTraffic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_QueryTraffic_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_QueryTraffic_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_RemoveAircraft_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_RemoveAircraft_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_RemoveAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_RemoveAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_RemoveAircraft_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_RemoveAircraft_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_UpdateAircraftSituation_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_UpdateAircraftSituation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_UpdateAircraftSituation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto}, {
      &scc_info_AircraftMessage_Situation_atc_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServer_UserAcquireAircraft_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_UserAcquireAircraft_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_UserAcquireAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_UserAcquireAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserAcquireAircraft_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_UserAcquireAircraft_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_UserPttPressed_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_UserPttPressed_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_UserPttPressed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_UserPttPressed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserPttPressed_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_UserPttPressed_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_UserPttReleased_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_UserPttReleased_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_UserPttReleased();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_UserPttReleased::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserPttReleased_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_UserPttReleased_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_UserReleaseAircraft_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_UserReleaseAircraft_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_UserReleaseAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_UserReleaseAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServer_UserReleaseAircraft_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientToServer_UserReleaseAircraft_atc_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ClientToServer_UserUpdateAircraftSituation_default_instance_;
    new (ptr) ::atc_proto::ClientToServer_UserUpdateAircraftSituation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ClientToServer_UserUpdateAircraftSituation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto}, {
      &scc_info_AircraftMessage_Situation_atc_2eproto.base,}};

static void InitDefaultsscc_info_GeoPoint_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_GeoPoint_default_instance_;
    new (ptr) ::atc_proto::GeoPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::GeoPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPoint_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoPoint_atc_2eproto}, {}};

static void InitDefaultsscc_info_GeoPolygon_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_GeoPolygon_default_instance_;
    new (ptr) ::atc_proto::GeoPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::GeoPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPolygon_atc_2eproto}, {
      &scc_info_GeoPolygon_GeoEdge_atc_2eproto.base,}};

static void InitDefaultsscc_info_GeoPolygon_GeoEdge_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_GeoPolygon_GeoEdge_default_instance_;
    new (ptr) ::atc_proto::GeoPolygon_GeoEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::GeoPolygon_GeoEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_GeoEdge_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPolygon_GeoEdge_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,}};

static void InitDefaultsscc_info_ParkingStandMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ParkingStandMessage_default_instance_;
    new (ptr) ::atc_proto::ParkingStandMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ParkingStandMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingStandMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingStandMessage_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,}};

static void InitDefaultsscc_info_RunwayMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_RunwayMessage_default_instance_;
    new (ptr) ::atc_proto::RunwayMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::RunwayMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunwayMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunwayMessage_atc_2eproto}, {
      &scc_info_RunwayMessage_End_atc_2eproto.base,}};

static void InitDefaultsscc_info_RunwayMessage_End_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_RunwayMessage_End_default_instance_;
    new (ptr) ::atc_proto::RunwayMessage_End();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::RunwayMessage_End::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunwayMessage_End_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunwayMessage_End_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_default_instance_;
    new (ptr) ::atc_proto::ServerToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_ServerToClient_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_ServerToClient_atc_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ServerToClient_ReplyConnect_atc_2eproto.base,
      &scc_info_ServerToClient_ReplyQueryAirport_atc_2eproto.base,
      &scc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto.base,
      &scc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto.base,
      &scc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto.base,
      &scc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto.base,
      &scc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto.base,
      &scc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto.base,
      &scc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto.base,
      &scc_info_ServerToClient_FaultDeclined_atc_2eproto.base,
      &scc_info_ServerToClient_FaultNotFound_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_FaultDeclined_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_FaultDeclined_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_FaultDeclined();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_FaultDeclined::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultDeclined_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_FaultDeclined_atc_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_FaultNotFound_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_FaultNotFound_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_FaultNotFound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_FaultNotFound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_FaultNotFound_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_FaultNotFound_atc_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_NotifyAircraftCreated_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_NotifyAircraftCreated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_NotifyAircraftCreated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto}, {
      &scc_info_AircraftMessage_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_NotifyAircraftRemoved_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_NotifyAircraftRemoved();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_NotifyAircraftRemoved::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_NotifyAircraftSituationUpdated_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto}, {
      &scc_info_AircraftMessage_Situation_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_ReplyConnect_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_ReplyConnect_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_ReplyConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_ReplyConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyConnect_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_ReplyConnect_atc_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_ReplyCreateAircraft_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_ReplyCreateAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_ReplyCreateAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto}, {}};

static void InitDefaultsscc_info_ServerToClient_ReplyQueryAirport_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_ReplyQueryAirport_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_ReplyQueryAirport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_ReplyQueryAirport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryAirport_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_ReplyQueryAirport_atc_2eproto}, {
      &scc_info_AirportMessage_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_ReplyQueryTaxiPath_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_ReplyQueryTaxiPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_ReplyQueryTaxiPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto}, {
      &scc_info_TaxiPathMessage_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_ReplyQueryTraffic_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_ReplyQueryTraffic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_ReplyQueryTraffic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto}, {
      &scc_info_AircraftMessage_atc_2eproto.base,}};

static void InitDefaultsscc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_ServerToClient_ReplyUserAcquireAircraft_default_instance_;
    new (ptr) ::atc_proto::ServerToClient_ReplyUserAcquireAircraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::ServerToClient_ReplyUserAcquireAircraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto}, {}};

static void InitDefaultsscc_info_TaxiEdgeMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_TaxiEdgeMessage_default_instance_;
    new (ptr) ::atc_proto::TaxiEdgeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::TaxiEdgeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiEdgeMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaxiEdgeMessage_atc_2eproto}, {
      &scc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto.base,}};

static void InitDefaultsscc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_TaxiEdgeMessage_ActiveZoneMatrix_default_instance_;
    new (ptr) ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto}, {}};

static void InitDefaultsscc_info_TaxiNodeMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_TaxiNodeMessage_default_instance_;
    new (ptr) ::atc_proto::TaxiNodeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::TaxiNodeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaxiNodeMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaxiNodeMessage_atc_2eproto}, {
      &scc_info_GeoPoint_atc_2eproto.base,}};

static void InitDefaultsscc_info_TaxiPathMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_TaxiPathMessage_default_instance_;
    new (ptr) ::atc_proto::TaxiPathMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::TaxiPathMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaxiPathMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaxiPathMessage_atc_2eproto}, {}};

static void InitDefaultsscc_info_Vector3dMessage_atc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atc_proto::_Vector3dMessage_default_instance_;
    new (ptr) ::atc_proto::Vector3dMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atc_proto::Vector3dMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3dMessage_atc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3dMessage_atc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_atc_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_atc_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_atc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_atc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_Connect, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryAirport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryAirport, icao_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTaxiPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTaxiPath, airport_icao_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTaxiPath, aircraft_model_icao_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTaxiPath, from_point_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTaxiPath, to_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_CreateAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_CreateAircraft, aircraft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UpdateAircraftSituation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UpdateAircraftSituation, aircraft_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UpdateAircraftSituation, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_RemoveAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_RemoveAircraft, aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserAcquireAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserAcquireAircraft, aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserUpdateAircraftSituation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserUpdateAircraftSituation, aircraft_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserUpdateAircraftSituation, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserReleaseAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserReleaseAircraft, aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserPttPressed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserPttPressed, frequency_khz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserPttReleased, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_UserPttReleased, frequency_khz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTraffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTraffic, min_lat_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTraffic, min_lon_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTraffic, max_lat_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTraffic, max_lon_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_QueryTraffic, cancellation_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_CancelTrafficQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer_CancelTrafficQuery, cancellation_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer, id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer, sent_at_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, connect_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, query_airport_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, create_aircraft_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, update_aircraft_situation_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, remove_aircraft_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, query_taxi_path_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, query_traffic_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, cancel_traffic_query_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, user_acquire_aircraft_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, user_update_aircraft_situation_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, user_release_aircraft_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, user_ptt_pressed_),
  offsetof(::atc_proto::ClientToServerDefaultTypeInternal, user_ptt_released_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ClientToServer, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_FaultDeclined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_FaultDeclined, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_FaultNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_FaultNotFound, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyConnect, server_banner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyCreateAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyCreateAircraft, created_aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryAirport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryAirport, airport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTaxiPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTaxiPath, success_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTaxiPath, taxi_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, min_lat_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, min_lon_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, max_lat_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, max_lon_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, traffic_batch_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyQueryTraffic, is_last_batch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftCreated, aircraft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftSituationUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftSituationUpdated, aircraft_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftSituationUpdated, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_NotifyAircraftRemoved, aircraft_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyUserAcquireAircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyUserAcquireAircraft, aircraft_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient_ReplyUserAcquireAircraft, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, reply_to_request_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, sent_at_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, request_sent_at_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, request_received_at_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, reply_connect_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, reply_query_airport_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, reply_create_aircraft_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, reply_query_taxi_path_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, reply_query_traffic_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, notify_aircraft_created_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, notify_aircraft_situation_updated_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, notify_aircraft_removed_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, reply_user_acquire_aircraft_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, fault_declined_),
  offsetof(::atc_proto::ServerToClientDefaultTypeInternal, fault_not_found_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ServerToClient, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPoint, lat_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPoint, lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPolygon_GeoEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPolygon_GeoEdge, type_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPolygon_GeoEdge, from_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::GeoPolygon, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::Vector3dMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::Vector3dMessage, lat_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::Vector3dMessage, lon_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::Vector3dMessage, alt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AttitudeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AttitudeMessage, heading_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AttitudeMessage, pitch_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AttitudeMessage, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, icao_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, location_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, runways_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, parking_stands_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, taxi_nodes_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirportMessage, taxi_edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage_End, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage_End, name_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage_End, heading_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage_End, centerline_point_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage_End, displaced_threshold_meters_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage_End, overrun_area_meters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage, width_meters_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage, length_meters_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage, mask_bit_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage, end_1_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::RunwayMessage, end_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiNodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiNodeMessage, id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiNodeMessage, location_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiNodeMessage, is_junction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix, departure_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix, arrival_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix, ils_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, name_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, node_id_1_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, node_id_2_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, type_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, is_one_way_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, is_high_speed_exit_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, length_meters_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, heading_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiEdgeMessage, active_zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, name_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, type_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, location_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, heading_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, width_code_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, categories_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, operation_types_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::ParkingStandMessage, airline_icaos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirspaceGeometryMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirspaceGeometryMessage, lateral_bounds_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirspaceGeometryMessage, lower_bound_feet_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AirspaceGeometryMessage, upper_bound_feet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, location_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, altitude_feet_msl_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, is_on_ground_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, heading_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, pitch_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, roll_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, flap_ratio_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, spoiler_ratio_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, gear_ratio_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, nose_wheel_angle_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, landing_lights_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, taxi_lights_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, strobe_lights_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, monitoring_frequency_khz_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, transmitting_frequency_khz_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, squawk_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, mode_c_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage_Situation, mode_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, model_icao_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, airline_icao_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, tail_no_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, call_sign_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::AircraftMessage, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiPathMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiPathMessage, from_node_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiPathMessage, to_node_id_),
  PROTOBUF_FIELD_OFFSET(::atc_proto::TaxiPathMessage, edge_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::atc_proto::ClientToServer_Connect)},
  { 6, -1, sizeof(::atc_proto::ClientToServer_QueryAirport)},
  { 12, -1, sizeof(::atc_proto::ClientToServer_QueryTaxiPath)},
  { 21, -1, sizeof(::atc_proto::ClientToServer_CreateAircraft)},
  { 27, -1, sizeof(::atc_proto::ClientToServer_UpdateAircraftSituation)},
  { 34, -1, sizeof(::atc_proto::ClientToServer_RemoveAircraft)},
  { 40, -1, sizeof(::atc_proto::ClientToServer_UserAcquireAircraft)},
  { 46, -1, sizeof(::atc_proto::ClientToServer_UserUpdateAircraftSituation)},
  { 53, -1, sizeof(::atc_proto::ClientToServer_UserReleaseAircraft)},
  { 59, -1, sizeof(::atc_proto::ClientToServer_UserPttPressed)},
  { 65, -1, sizeof(::atc_proto::ClientToServer_UserPttReleased)},
  { 71, -1, sizeof(::atc_proto::ClientToServer_QueryTraffic)},
  { 81, -1, sizeof(::atc_proto::ClientToServer_CancelTrafficQuery)},
  { 87, -1, sizeof(::atc_proto::ClientToServer)},
  { 108, -1, sizeof(::atc_proto::ServerToClient_FaultDeclined)},
  { 114, -1, sizeof(::atc_proto::ServerToClient_FaultNotFound)},
  { 120, -1, sizeof(::atc_proto::ServerToClient_ReplyConnect)},
  { 126, -1, sizeof(::atc_proto::ServerToClient_ReplyCreateAircraft)},
  { 132, -1, sizeof(::atc_proto::ServerToClient_ReplyQueryAirport)},
  { 138, -1, sizeof(::atc_proto::ServerToClient_ReplyQueryTaxiPath)},
  { 145, -1, sizeof(::atc_proto::ServerToClient_ReplyQueryTraffic)},
  { 156, -1, sizeof(::atc_proto::ServerToClient_NotifyAircraftCreated)},
  { 162, -1, sizeof(::atc_proto::ServerToClient_NotifyAircraftSituationUpdated)},
  { 169, -1, sizeof(::atc_proto::ServerToClient_NotifyAircraftRemoved)},
  { 175, -1, sizeof(::atc_proto::ServerToClient_ReplyUserAcquireAircraft)},
  { 182, -1, sizeof(::atc_proto::ServerToClient)},
  { 204, -1, sizeof(::atc_proto::GeoPoint)},
  { 211, -1, sizeof(::atc_proto::GeoPolygon_GeoEdge)},
  { 218, -1, sizeof(::atc_proto::GeoPolygon)},
  { 224, -1, sizeof(::atc_proto::Vector3dMessage)},
  { 232, -1, sizeof(::atc_proto::AttitudeMessage)},
  { 240, -1, sizeof(::atc_proto::AirportMessage)},
  { 251, -1, sizeof(::atc_proto::RunwayMessage_End)},
  { 261, -1, sizeof(::atc_proto::RunwayMessage)},
  { 271, -1, sizeof(::atc_proto::TaxiNodeMessage)},
  { 279, -1, sizeof(::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix)},
  { 287, -1, sizeof(::atc_proto::TaxiEdgeMessage)},
  { 302, -1, sizeof(::atc_proto::ParkingStandMessage)},
  { 316, -1, sizeof(::atc_proto::AirspaceGeometryMessage)},
  { 324, -1, sizeof(::atc_proto::AircraftMessage_Situation)},
  { 347, -1, sizeof(::atc_proto::AircraftMessage)},
  { 358, -1, sizeof(::atc_proto::TaxiPathMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_QueryAirport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_QueryTaxiPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_CreateAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_UpdateAircraftSituation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_RemoveAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_UserAcquireAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_UserUpdateAircraftSituation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_UserReleaseAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_UserPttPressed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_UserPttReleased_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_QueryTraffic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_CancelTrafficQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ClientToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_FaultDeclined_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_FaultNotFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_ReplyConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_ReplyCreateAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_ReplyQueryAirport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_ReplyQueryTaxiPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_ReplyQueryTraffic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_NotifyAircraftCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_NotifyAircraftSituationUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_NotifyAircraftRemoved_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_ReplyUserAcquireAircraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ServerToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_GeoPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_GeoPolygon_GeoEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_GeoPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_Vector3dMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_AttitudeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_AirportMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_RunwayMessage_End_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_RunwayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_TaxiNodeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_TaxiEdgeMessage_ActiveZoneMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_TaxiEdgeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_ParkingStandMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_AirspaceGeometryMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_AircraftMessage_Situation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_AircraftMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atc_proto::_TaxiPathMessage_default_instance_),
};

const char descriptor_table_protodef_atc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tatc.proto\022\tatc_proto\032\037google/protobuf/"
  "timestamp.proto\"\347\016\n\016ClientToServer\022\n\n\002id"
  "\030\001 \001(\004\022+\n\007sent_at\030\002 \001(\0132\032.google.protobu"
  "f.Timestamp\0224\n\007connect\030e \001(\0132!.atc_proto"
  ".ClientToServer.ConnectH\000\022\?\n\rquery_airpo"
  "rt\030f \001(\0132&.atc_proto.ClientToServer.Quer"
  "yAirportH\000\022C\n\017create_aircraft\030g \001(\0132(.at"
  "c_proto.ClientToServer.CreateAircraftH\000\022"
  "V\n\031update_aircraft_situation\030h \001(\01321.atc"
  "_proto.ClientToServer.UpdateAircraftSitu"
  "ationH\000\022C\n\017remove_aircraft\030i \001(\0132(.atc_p"
  "roto.ClientToServer.RemoveAircraftH\000\022B\n\017"
  "query_taxi_path\030j \001(\0132\'.atc_proto.Client"
  "ToServer.QueryTaxiPathH\000\022\?\n\rquery_traffi"
  "c\030k \001(\0132&.atc_proto.ClientToServer.Query"
  "TrafficH\000\022L\n\024cancel_traffic_query\030l \001(\0132"
  ",.atc_proto.ClientToServer.CancelTraffic"
  "QueryH\000\022N\n\025user_acquire_aircraft\030m \001(\0132-"
  ".atc_proto.ClientToServer.UserAcquireAir"
  "craftH\000\022_\n\036user_update_aircraft_situatio"
  "n\030n \001(\01325.atc_proto.ClientToServer.UserU"
  "pdateAircraftSituationH\000\022N\n\025user_release"
  "_aircraft\030o \001(\0132-.atc_proto.ClientToServ"
  "er.UserReleaseAircraftH\000\022D\n\020user_ptt_pre"
  "ssed\030p \001(\0132(.atc_proto.ClientToServer.Us"
  "erPttPressedH\000\022F\n\021user_ptt_released\030q \001("
  "\0132).atc_proto.ClientToServer.UserPttRele"
  "asedH\000\032\030\n\007Connect\022\r\n\005token\030\001 \001(\t\032!\n\014Quer"
  "yAirport\022\021\n\ticao_code\030\001 \001(\t\032\222\001\n\rQueryTax"
  "iPath\022\024\n\014airport_icao\030\001 \001(\t\022\033\n\023aircraft_"
  "model_icao\030\002 \001(\t\022\'\n\nfrom_point\030\003 \001(\0132\023.a"
  "tc_proto.GeoPoint\022%\n\010to_point\030\004 \001(\0132\023.at"
  "c_proto.GeoPoint\032>\n\016CreateAircraft\022,\n\010ai"
  "rcraft\030\001 \001(\0132\032.atc_proto.AircraftMessage"
  "\032g\n\027UpdateAircraftSituation\022\023\n\013aircraft_"
  "id\030\001 \001(\r\0227\n\tsituation\030\002 \001(\0132$.atc_proto."
  "AircraftMessage.Situation\032%\n\016RemoveAircr"
  "aft\022\023\n\013aircraft_id\030\001 \001(\r\032*\n\023UserAcquireA"
  "ircraft\022\023\n\013aircraft_id\030\001 \001(\r\032k\n\033UserUpda"
  "teAircraftSituation\022\023\n\013aircraft_id\030\001 \001(\r"
  "\0227\n\tsituation\030\002 \001(\0132$.atc_proto.Aircraft"
  "Message.Situation\032*\n\023UserReleaseAircraft"
  "\022\023\n\013aircraft_id\030\001 \001(\r\032\'\n\016UserPttPressed\022"
  "\025\n\rfrequency_khz\030\001 \001(\r\032(\n\017UserPttRelease"
  "d\022\025\n\rfrequency_khz\030\001 \001(\r\032l\n\014QueryTraffic"
  "\022\017\n\007min_lat\030\001 \001(\001\022\017\n\007min_lon\030\002 \001(\001\022\017\n\007ma"
  "x_lat\030\003 \001(\001\022\017\n\007max_lon\030\004 \001(\001\022\030\n\020cancella"
  "tion_key\030\005 \001(\t\032.\n\022CancelTrafficQuery\022\030\n\020"
  "cancellation_key\030\001 \001(\tB\t\n\007payload\"\324\016\n\016Se"
  "rverToClient\022\n\n\002id\030\002 \001(\004\022\033\n\023reply_to_req"
  "uest_id\030\003 \001(\004\022+\n\007sent_at\030\004 \001(\0132\032.google."
  "protobuf.Timestamp\0223\n\017request_sent_at\030\005 "
  "\001(\0132\032.google.protobuf.Timestamp\0227\n\023reque"
  "st_received_at\030\006 \001(\0132\032.google.protobuf.T"
  "imestamp\022@\n\rreply_connect\030\315\010 \001(\0132&.atc_p"
  "roto.ServerToClient.ReplyConnectH\000\022K\n\023re"
  "ply_query_airport\030\316\010 \001(\0132+.atc_proto.Ser"
  "verToClient.ReplyQueryAirportH\000\022O\n\025reply"
  "_create_aircraft\030\317\010 \001(\0132-.atc_proto.Serv"
  "erToClient.ReplyCreateAircraftH\000\022N\n\025repl"
  "y_query_taxi_path\030\322\010 \001(\0132,.atc_proto.Ser"
  "verToClient.ReplyQueryTaxiPathH\000\022K\n\023repl"
  "y_query_traffic\030\323\010 \001(\0132+.atc_proto.Serve"
  "rToClient.ReplyQueryTrafficH\000\022S\n\027notify_"
  "aircraft_created\030\311\001 \001(\0132/.atc_proto.Serv"
  "erToClient.NotifyAircraftCreatedH\000\022f\n!no"
  "tify_aircraft_situation_updated\030\312\001 \001(\01328"
  ".atc_proto.ServerToClient.NotifyAircraft"
  "SituationUpdatedH\000\022S\n\027notify_aircraft_re"
  "moved\030\313\001 \001(\0132/.atc_proto.ServerToClient."
  "NotifyAircraftRemovedH\000\022Z\n\033reply_user_ac"
  "quire_aircraft\030\314\001 \001(\01322.atc_proto.Server"
  "ToClient.ReplyUserAcquireAircraftH\000\022B\n\016f"
  "ault_declined\030\271\027 \001(\0132\'.atc_proto.ServerT"
  "oClient.FaultDeclinedH\000\022C\n\017fault_not_fou"
  "nd\030\272\027 \001(\0132\'.atc_proto.ServerToClient.Fau"
  "ltNotFoundH\000\032 \n\rFaultDeclined\022\017\n\007message"
  "\030\001 \001(\t\032 \n\rFaultNotFound\022\017\n\007message\030\001 \001(\t"
  "\032%\n\014ReplyConnect\022\025\n\rserver_banner\030\002 \001(\t\032"
  "2\n\023ReplyCreateAircraft\022\033\n\023created_aircra"
  "ft_id\030\001 \001(\r\032\?\n\021ReplyQueryAirport\022*\n\007airp"
  "ort\030\001 \001(\0132\031.atc_proto.AirportMessage\032T\n\022"
  "ReplyQueryTaxiPath\022\017\n\007success\030\001 \001(\010\022-\n\tt"
  "axi_path\030\002 \001(\0132\032.atc_proto.TaxiPathMessa"
  "ge\032\241\001\n\021ReplyQueryTraffic\022\017\n\007min_lat\030\001 \001("
  "\001\022\017\n\007min_lon\030\002 \001(\001\022\017\n\007max_lat\030\003 \001(\001\022\017\n\007m"
  "ax_lon\030\004 \001(\001\0221\n\rtraffic_batch\030\005 \003(\0132\032.at"
  "c_proto.AircraftMessage\022\025\n\ris_last_batch"
  "\030\006 \001(\010\032E\n\025NotifyAircraftCreated\022,\n\010aircr"
  "aft\030\001 \001(\0132\032.atc_proto.AircraftMessage\032n\n"
  "\036NotifyAircraftSituationUpdated\022\023\n\013aircr"
  "aft_id\030\001 \001(\r\0227\n\tsituation\030\002 \001(\0132$.atc_pr"
  "oto.AircraftMessage.Situation\032,\n\025NotifyA"
  "ircraftRemoved\022\023\n\013aircraft_id\030\001 \001(\r\032@\n\030R"
  "eplyUserAcquireAircraft\022\023\n\013aircraft_id\030\001"
  " \001(\r\022\017\n\007success\030\002 \001(\010B\t\n\007payload\"$\n\010GeoP"
  "oint\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\"\224\001\n\nGeoPo"
  "lygon\022,\n\005edges\030\001 \003(\0132\035.atc_proto.GeoPoly"
  "gon.GeoEdge\032X\n\007GeoEdge\022$\n\004type\030\001 \001(\0162\026.a"
  "tc_proto.GeoEdgeType\022\'\n\nfrom_point\030\002 \001(\013"
  "2\023.atc_proto.GeoPoint\"8\n\017Vector3dMessage"
  "\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\022\013\n\003alt\030\003 \001(\001\""
  "\?\n\017AttitudeMessage\022\017\n\007heading\030\001 \001(\002\022\r\n\005p"
  "itch\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"\210\002\n\016AirportMess"
  "age\022\014\n\004icao\030\001 \001(\t\022%\n\010location\030\002 \001(\0132\023.at"
  "c_proto.GeoPoint\022)\n\007runways\030\003 \003(\0132\030.atc_"
  "proto.RunwayMessage\0226\n\016parking_stands\030\004 "
  "\003(\0132\036.atc_proto.ParkingStandMessage\022.\n\nt"
  "axi_nodes\030\005 \003(\0132\032.atc_proto.TaxiNodeMess"
  "age\022.\n\ntaxi_edges\030\006 \003(\0132\032.atc_proto.Taxi"
  "EdgeMessage\"\277\002\n\rRunwayMessage\022\024\n\014width_m"
  "eters\030\001 \001(\002\022\025\n\rlength_meters\030\002 \001(\002\022\020\n\010ma"
  "sk_bit\030\003 \001(\r\022+\n\005end_1\030\004 \001(\0132\034.atc_proto."
  "RunwayMessage.End\022+\n\005end_2\030\005 \001(\0132\034.atc_p"
  "roto.RunwayMessage.End\032\224\001\n\003End\022\014\n\004name\030\001"
  " \001(\t\022\017\n\007heading\030\002 \001(\002\022-\n\020centerline_poin"
  "t\030\003 \001(\0132\023.atc_proto.GeoPoint\022\"\n\032displace"
  "d_threshold_meters\030\004 \001(\002\022\033\n\023overrun_area"
  "_meters\030\005 \001(\002\"Y\n\017TaxiNodeMessage\022\n\n\002id\030\001"
  " \001(\005\022%\n\010location\030\002 \001(\0132\023.atc_proto.GeoPo"
  "int\022\023\n\013is_junction\030\003 \001(\010\"\330\002\n\017TaxiEdgeMes"
  "sage\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tnode_i"
  "d_1\030\003 \001(\005\022\021\n\tnode_id_2\030\004 \001(\005\022%\n\004type\030\005 \001"
  "(\0162\027.atc_proto.TaxiEdgeType\022\022\n\nis_one_wa"
  "y\030\006 \001(\010\022\032\n\022is_high_speed_exit\030\007 \001(\010\022\025\n\rl"
  "ength_meters\030\010 \001(\002\022\017\n\007heading\030\t \001(\002\022A\n\014a"
  "ctive_zones\030\n \001(\0132+.atc_proto.TaxiEdgeMe"
  "ssage.ActiveZoneMatrix\032C\n\020ActiveZoneMatr"
  "ix\022\021\n\tdeparture\030\001 \001(\004\022\017\n\007arrival\030\002 \001(\004\022\013"
  "\n\003ils\030\003 \001(\004\"\241\002\n\023ParkingStandMessage\022\n\n\002i"
  "d\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022)\n\004type\030\003 \001(\0162\033.at"
  "c_proto.ParkingStandType\022%\n\010location\030\004 \001"
  "(\0132\023.atc_proto.GeoPoint\022\017\n\007heading\030\005 \001(\002"
  "\022\022\n\nwidth_code\030\006 \001(\t\022/\n\ncategories\030\007 \003(\016"
  "2\033.atc_proto.AircraftCategory\0221\n\017operati"
  "on_types\030\010 \003(\0162\030.atc_proto.OperationType"
  "\022\025\n\rairline_icaos\030\t \003(\t\"|\n\027AirspaceGeome"
  "tryMessage\022-\n\016lateral_bounds\030\001 \001(\0132\025.atc"
  "_proto.GeoPolygon\022\030\n\020lower_bound_feet\030\002 "
  "\001(\002\022\030\n\020upper_bound_feet\030\003 \001(\002\"\313\004\n\017Aircra"
  "ftMessage\022\n\n\002id\030\001 \001(\r\022\022\n\nmodel_icao\030\002 \001("
  "\t\022\024\n\014airline_icao\030\003 \001(\t\022\017\n\007tail_no\030\004 \001(\t"
  "\022\021\n\tcall_sign\030\005 \001(\t\0227\n\tsituation\030\006 \001(\0132$"
  ".atc_proto.AircraftMessage.Situation\032\244\003\n"
  "\tSituation\022%\n\010location\030\001 \001(\0132\023.atc_proto"
  ".GeoPoint\022\031\n\021altitude_feet_msl\030\002 \001(\002\022\024\n\014"
  "is_on_ground\030\003 \001(\010\022\017\n\007heading\030\004 \001(\002\022\r\n\005p"
  "itch\030\005 \001(\002\022\014\n\004roll\030\006 \001(\002\022\022\n\nflap_ratio\030\007"
  " \001(\002\022\025\n\rspoiler_ratio\030\010 \001(\002\022\022\n\ngear_rati"
  "o\030\t \001(\002\022\030\n\020nose_wheel_angle\030\n \001(\002\022\026\n\016lan"
  "ding_lights\030\013 \001(\010\022\023\n\013taxi_lights\030\014 \001(\010\022\025"
  "\n\rstrobe_lights\030\r \001(\010\022 \n\030monitoring_freq"
  "uency_khz\030\016 \003(\005\022\"\n\032transmitting_frequenc"
  "y_khz\030\017 \001(\005\022\016\n\006squawk\030\020 \001(\t\022\016\n\006mode_c\030\021 "
  "\001(\010\022\016\n\006mode_s\030\022 \001(\010\"M\n\017TaxiPathMessage\022\024"
  "\n\014from_node_id\030\001 \001(\005\022\022\n\nto_node_id\030\002 \001(\005"
  "\022\020\n\010edge_ids\030\003 \003(\005*\306\001\n\013GeoEdgeType\022\024\n\020GE"
  "O_EDGE_UNKNOWN\020\000\022\030\n\024GEO_EDGE_ARC_BY_EDGE"
  "\020\001\022\023\n\017GEO_EDGE_CIRCLE\020\002\022\031\n\025GEO_EDGE_GREA"
  "T_CIRCLE\020\003\022\027\n\023GEO_EDGE_RHUMB_LINE\020\004\022\032\n\026G"
  "EO_EDGE_CLOCKWISE_ARC\020\005\022\"\n\036GEO_EDGE_COUN"
  "TER_CLOCKWISE_ARC\020\006*\347\001\n\020AircraftCategory"
  "\022\032\n\026AIRCRAFT_CATEGORY_NONE\020\000\022\033\n\027AIRCRAFT"
  "_CATEGORY_HEAVY\020\001\022\031\n\025AIRCRAFT_CATEGORY_J"
  "ET\020\002\022\037\n\033AIRCRAFT_CATEGORY_TURBOPROP\020\004\022\032\n"
  "\026AIRCRAFT_CATEGORY_PROP\020\010\022 \n\034AIRCRAFT_CA"
  "TEGORY_LIGHT_PROP\020\020\022 \n\034AIRCRAFT_CATEGORY"
  "_HELICPOTER\020 *\246\001\n\rOperationType\022\033\n\027AIRCR"
  "AFT_OPERATION_NONE\020\000\022\031\n\025AIRCRAFT_OPERATI"
  "ON_GA\020\001\022\036\n\032AIRCRAFT_OPERATION_AIRLINE\020\002\022"
  "\034\n\030AIRCRAFT_OPERATION_CARGO\020\004\022\037\n\033AIRCRAF"
  "T_OPERATION_MILITARY\020\010*a\n\020ParkingStandTy"
  "pe\022\023\n\017PARKING_UNKNOWN\020\000\022\020\n\014PARKING_GATE\020"
  "\001\022\022\n\016PARKING_REMOTE\020\002\022\022\n\016PARKING_HANGAR\020"
  "\003*T\n\014TaxiEdgeType\022\027\n\023TAXI_EDGE_GROUNDWAY"
  "\020\000\022\025\n\021TAXI_EDGE_TAXIWAY\020\001\022\024\n\020TAXI_EDGE_R"
  "UNWAY\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_atc_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_atc_2eproto_sccs[42] = {
  &scc_info_AircraftMessage_atc_2eproto.base,
  &scc_info_AircraftMessage_Situation_atc_2eproto.base,
  &scc_info_AirportMessage_atc_2eproto.base,
  &scc_info_AirspaceGeometryMessage_atc_2eproto.base,
  &scc_info_AttitudeMessage_atc_2eproto.base,
  &scc_info_ClientToServer_atc_2eproto.base,
  &scc_info_ClientToServer_CancelTrafficQuery_atc_2eproto.base,
  &scc_info_ClientToServer_Connect_atc_2eproto.base,
  &scc_info_ClientToServer_CreateAircraft_atc_2eproto.base,
  &scc_info_ClientToServer_QueryAirport_atc_2eproto.base,
  &scc_info_ClientToServer_QueryTaxiPath_atc_2eproto.base,
  &scc_info_ClientToServer_QueryTraffic_atc_2eproto.base,
  &scc_info_ClientToServer_RemoveAircraft_atc_2eproto.base,
  &scc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto.base,
  &scc_info_ClientToServer_UserAcquireAircraft_atc_2eproto.base,
  &scc_info_ClientToServer_UserPttPressed_atc_2eproto.base,
  &scc_info_ClientToServer_UserPttReleased_atc_2eproto.base,
  &scc_info_ClientToServer_UserReleaseAircraft_atc_2eproto.base,
  &scc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto.base,
  &scc_info_GeoPoint_atc_2eproto.base,
  &scc_info_GeoPolygon_atc_2eproto.base,
  &scc_info_GeoPolygon_GeoEdge_atc_2eproto.base,
  &scc_info_ParkingStandMessage_atc_2eproto.base,
  &scc_info_RunwayMessage_atc_2eproto.base,
  &scc_info_RunwayMessage_End_atc_2eproto.base,
  &scc_info_ServerToClient_atc_2eproto.base,
  &scc_info_ServerToClient_FaultDeclined_atc_2eproto.base,
  &scc_info_ServerToClient_FaultNotFound_atc_2eproto.base,
  &scc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto.base,
  &scc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto.base,
  &scc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto.base,
  &scc_info_ServerToClient_ReplyConnect_atc_2eproto.base,
  &scc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto.base,
  &scc_info_ServerToClient_ReplyQueryAirport_atc_2eproto.base,
  &scc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto.base,
  &scc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto.base,
  &scc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto.base,
  &scc_info_TaxiEdgeMessage_atc_2eproto.base,
  &scc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto.base,
  &scc_info_TaxiNodeMessage_atc_2eproto.base,
  &scc_info_TaxiPathMessage_atc_2eproto.base,
  &scc_info_Vector3dMessage_atc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_atc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_atc_2eproto = {
  false, false, descriptor_table_protodef_atc_2eproto, "atc.proto", 7055,
  &descriptor_table_atc_2eproto_once, descriptor_table_atc_2eproto_sccs, descriptor_table_atc_2eproto_deps, 42, 1,
  schemas, file_default_instances, TableStruct_atc_2eproto::offsets,
  file_level_metadata_atc_2eproto, 42, file_level_enum_descriptors_atc_2eproto, file_level_service_descriptors_atc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_atc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_atc_2eproto)), true);
namespace atc_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoEdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_atc_2eproto);
  return file_level_enum_descriptors_atc_2eproto[0];
}
bool GeoEdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AircraftCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_atc_2eproto);
  return file_level_enum_descriptors_atc_2eproto[1];
}
bool AircraftCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_atc_2eproto);
  return file_level_enum_descriptors_atc_2eproto[2];
}
bool OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingStandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_atc_2eproto);
  return file_level_enum_descriptors_atc_2eproto[3];
}
bool ParkingStandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaxiEdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_atc_2eproto);
  return file_level_enum_descriptors_atc_2eproto[4];
}
bool TaxiEdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ClientToServer_Connect::InitAsDefaultInstance() {
}
class ClientToServer_Connect::_Internal {
 public:
};

ClientToServer_Connect::ClientToServer_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.Connect)
}
ClientToServer_Connect::ClientToServer_Connect(const ClientToServer_Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.Connect)
}

void ClientToServer_Connect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_Connect_atc_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientToServer_Connect::~ClientToServer_Connect() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.Connect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServer_Connect::ArenaDtor(void* object) {
  ClientToServer_Connect* _this = reinterpret_cast< ClientToServer_Connect* >(object);
  (void)_this;
}
void ClientToServer_Connect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_Connect& ClientToServer_Connect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_Connect_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ClientToServer.Connect.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_Connect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ClientToServer.Connect.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.Connect)
  return target;
}

size_t ClientToServer_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.Connect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Connect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Connect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_Connect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.Connect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.Connect)
    MergeFrom(*source);
  }
}

void ClientToServer_Connect::MergeFrom(const ClientToServer_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void ClientToServer_Connect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Connect::CopyFrom(const ClientToServer_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Connect::IsInitialized() const {
  return true;
}

void ClientToServer_Connect::InternalSwap(ClientToServer_Connect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_Connect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_QueryAirport::InitAsDefaultInstance() {
}
class ClientToServer_QueryAirport::_Internal {
 public:
};

ClientToServer_QueryAirport::ClientToServer_QueryAirport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.QueryAirport)
}
ClientToServer_QueryAirport::ClientToServer_QueryAirport(const ClientToServer_QueryAirport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icao_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icao_code().empty()) {
    icao_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icao_code(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.QueryAirport)
}

void ClientToServer_QueryAirport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_QueryAirport_atc_2eproto.base);
  icao_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientToServer_QueryAirport::~ClientToServer_QueryAirport() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.QueryAirport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_QueryAirport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icao_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServer_QueryAirport::ArenaDtor(void* object) {
  ClientToServer_QueryAirport* _this = reinterpret_cast< ClientToServer_QueryAirport* >(object);
  (void)_this;
}
void ClientToServer_QueryAirport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_QueryAirport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_QueryAirport& ClientToServer_QueryAirport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_QueryAirport_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_QueryAirport::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.QueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icao_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_QueryAirport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string icao_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_icao_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ClientToServer.QueryAirport.icao_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_QueryAirport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.QueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string icao_code = 1;
  if (this->icao_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao_code().data(), static_cast<int>(this->_internal_icao_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ClientToServer.QueryAirport.icao_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_icao_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.QueryAirport)
  return target;
}

size_t ClientToServer_QueryAirport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.QueryAirport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string icao_code = 1;
  if (this->icao_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_QueryAirport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.QueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_QueryAirport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_QueryAirport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.QueryAirport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.QueryAirport)
    MergeFrom(*source);
  }
}

void ClientToServer_QueryAirport::MergeFrom(const ClientToServer_QueryAirport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.QueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icao_code().size() > 0) {
    _internal_set_icao_code(from._internal_icao_code());
  }
}

void ClientToServer_QueryAirport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.QueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_QueryAirport::CopyFrom(const ClientToServer_QueryAirport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.QueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_QueryAirport::IsInitialized() const {
  return true;
}

void ClientToServer_QueryAirport::InternalSwap(ClientToServer_QueryAirport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icao_code_.Swap(&other->icao_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_QueryAirport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_QueryTaxiPath::InitAsDefaultInstance() {
  ::atc_proto::_ClientToServer_QueryTaxiPath_default_instance_._instance.get_mutable()->from_point_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
  ::atc_proto::_ClientToServer_QueryTaxiPath_default_instance_._instance.get_mutable()->to_point_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class ClientToServer_QueryTaxiPath::_Internal {
 public:
  static const ::atc_proto::GeoPoint& from_point(const ClientToServer_QueryTaxiPath* msg);
  static const ::atc_proto::GeoPoint& to_point(const ClientToServer_QueryTaxiPath* msg);
};

const ::atc_proto::GeoPoint&
ClientToServer_QueryTaxiPath::_Internal::from_point(const ClientToServer_QueryTaxiPath* msg) {
  return *msg->from_point_;
}
const ::atc_proto::GeoPoint&
ClientToServer_QueryTaxiPath::_Internal::to_point(const ClientToServer_QueryTaxiPath* msg) {
  return *msg->to_point_;
}
ClientToServer_QueryTaxiPath::ClientToServer_QueryTaxiPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.QueryTaxiPath)
}
ClientToServer_QueryTaxiPath::ClientToServer_QueryTaxiPath(const ClientToServer_QueryTaxiPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  airport_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_airport_icao().empty()) {
    airport_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_airport_icao(),
      GetArena());
  }
  aircraft_model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aircraft_model_icao().empty()) {
    aircraft_model_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aircraft_model_icao(),
      GetArena());
  }
  if (from._internal_has_from_point()) {
    from_point_ = new ::atc_proto::GeoPoint(*from.from_point_);
  } else {
    from_point_ = nullptr;
  }
  if (from._internal_has_to_point()) {
    to_point_ = new ::atc_proto::GeoPoint(*from.to_point_);
  } else {
    to_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.QueryTaxiPath)
}

void ClientToServer_QueryTaxiPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_QueryTaxiPath_atc_2eproto.base);
  airport_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aircraft_model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_point_) -
      reinterpret_cast<char*>(&from_point_)) + sizeof(to_point_));
}

ClientToServer_QueryTaxiPath::~ClientToServer_QueryTaxiPath() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.QueryTaxiPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_QueryTaxiPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  airport_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aircraft_model_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_point_;
  if (this != internal_default_instance()) delete to_point_;
}

void ClientToServer_QueryTaxiPath::ArenaDtor(void* object) {
  ClientToServer_QueryTaxiPath* _this = reinterpret_cast< ClientToServer_QueryTaxiPath* >(object);
  (void)_this;
}
void ClientToServer_QueryTaxiPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_QueryTaxiPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_QueryTaxiPath& ClientToServer_QueryTaxiPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_QueryTaxiPath_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_QueryTaxiPath::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.QueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  airport_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aircraft_model_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && from_point_ != nullptr) {
    delete from_point_;
  }
  from_point_ = nullptr;
  if (GetArena() == nullptr && to_point_ != nullptr) {
    delete to_point_;
  }
  to_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_QueryTaxiPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string airport_icao = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_airport_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ClientToServer.QueryTaxiPath.airport_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aircraft_model_icao = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_aircraft_model_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ClientToServer.QueryTaxiPath.aircraft_model_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint from_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint to_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_QueryTaxiPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.QueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string airport_icao = 1;
  if (this->airport_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airport_icao().data(), static_cast<int>(this->_internal_airport_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ClientToServer.QueryTaxiPath.airport_icao");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_airport_icao(), target);
  }

  // string aircraft_model_icao = 2;
  if (this->aircraft_model_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aircraft_model_icao().data(), static_cast<int>(this->_internal_aircraft_model_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ClientToServer.QueryTaxiPath.aircraft_model_icao");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_aircraft_model_icao(), target);
  }

  // .atc_proto.GeoPoint from_point = 3;
  if (this->has_from_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from_point(this), target, stream);
  }

  // .atc_proto.GeoPoint to_point = 4;
  if (this->has_to_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.QueryTaxiPath)
  return target;
}

size_t ClientToServer_QueryTaxiPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.QueryTaxiPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string airport_icao = 1;
  if (this->airport_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_airport_icao());
  }

  // string aircraft_model_icao = 2;
  if (this->aircraft_model_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aircraft_model_icao());
  }

  // .atc_proto.GeoPoint from_point = 3;
  if (this->has_from_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_point_);
  }

  // .atc_proto.GeoPoint to_point = 4;
  if (this->has_to_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_QueryTaxiPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.QueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_QueryTaxiPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_QueryTaxiPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.QueryTaxiPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.QueryTaxiPath)
    MergeFrom(*source);
  }
}

void ClientToServer_QueryTaxiPath::MergeFrom(const ClientToServer_QueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.QueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.airport_icao().size() > 0) {
    _internal_set_airport_icao(from._internal_airport_icao());
  }
  if (from.aircraft_model_icao().size() > 0) {
    _internal_set_aircraft_model_icao(from._internal_aircraft_model_icao());
  }
  if (from.has_from_point()) {
    _internal_mutable_from_point()->::atc_proto::GeoPoint::MergeFrom(from._internal_from_point());
  }
  if (from.has_to_point()) {
    _internal_mutable_to_point()->::atc_proto::GeoPoint::MergeFrom(from._internal_to_point());
  }
}

void ClientToServer_QueryTaxiPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.QueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_QueryTaxiPath::CopyFrom(const ClientToServer_QueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.QueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_QueryTaxiPath::IsInitialized() const {
  return true;
}

void ClientToServer_QueryTaxiPath::InternalSwap(ClientToServer_QueryTaxiPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  airport_icao_.Swap(&other->airport_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aircraft_model_icao_.Swap(&other->aircraft_model_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer_QueryTaxiPath, to_point_)
      + sizeof(ClientToServer_QueryTaxiPath::to_point_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer_QueryTaxiPath, from_point_)>(
          reinterpret_cast<char*>(&from_point_),
          reinterpret_cast<char*>(&other->from_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_QueryTaxiPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_CreateAircraft::InitAsDefaultInstance() {
  ::atc_proto::_ClientToServer_CreateAircraft_default_instance_._instance.get_mutable()->aircraft_ = const_cast< ::atc_proto::AircraftMessage*>(
      ::atc_proto::AircraftMessage::internal_default_instance());
}
class ClientToServer_CreateAircraft::_Internal {
 public:
  static const ::atc_proto::AircraftMessage& aircraft(const ClientToServer_CreateAircraft* msg);
};

const ::atc_proto::AircraftMessage&
ClientToServer_CreateAircraft::_Internal::aircraft(const ClientToServer_CreateAircraft* msg) {
  return *msg->aircraft_;
}
ClientToServer_CreateAircraft::ClientToServer_CreateAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.CreateAircraft)
}
ClientToServer_CreateAircraft::ClientToServer_CreateAircraft(const ClientToServer_CreateAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aircraft()) {
    aircraft_ = new ::atc_proto::AircraftMessage(*from.aircraft_);
  } else {
    aircraft_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.CreateAircraft)
}

void ClientToServer_CreateAircraft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_CreateAircraft_atc_2eproto.base);
  aircraft_ = nullptr;
}

ClientToServer_CreateAircraft::~ClientToServer_CreateAircraft() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.CreateAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_CreateAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aircraft_;
}

void ClientToServer_CreateAircraft::ArenaDtor(void* object) {
  ClientToServer_CreateAircraft* _this = reinterpret_cast< ClientToServer_CreateAircraft* >(object);
  (void)_this;
}
void ClientToServer_CreateAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_CreateAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_CreateAircraft& ClientToServer_CreateAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_CreateAircraft_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_CreateAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.CreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && aircraft_ != nullptr) {
    delete aircraft_;
  }
  aircraft_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_CreateAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .atc_proto.AircraftMessage aircraft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_CreateAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.CreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage aircraft = 1;
  if (this->has_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aircraft(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.CreateAircraft)
  return target;
}

size_t ClientToServer_CreateAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.CreateAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage aircraft = 1;
  if (this->has_aircraft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_CreateAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.CreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_CreateAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_CreateAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.CreateAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.CreateAircraft)
    MergeFrom(*source);
  }
}

void ClientToServer_CreateAircraft::MergeFrom(const ClientToServer_CreateAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.CreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aircraft()) {
    _internal_mutable_aircraft()->::atc_proto::AircraftMessage::MergeFrom(from._internal_aircraft());
  }
}

void ClientToServer_CreateAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.CreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_CreateAircraft::CopyFrom(const ClientToServer_CreateAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.CreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_CreateAircraft::IsInitialized() const {
  return true;
}

void ClientToServer_CreateAircraft::InternalSwap(ClientToServer_CreateAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_, other->aircraft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_CreateAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UpdateAircraftSituation::InitAsDefaultInstance() {
  ::atc_proto::_ClientToServer_UpdateAircraftSituation_default_instance_._instance.get_mutable()->situation_ = const_cast< ::atc_proto::AircraftMessage_Situation*>(
      ::atc_proto::AircraftMessage_Situation::internal_default_instance());
}
class ClientToServer_UpdateAircraftSituation::_Internal {
 public:
  static const ::atc_proto::AircraftMessage_Situation& situation(const ClientToServer_UpdateAircraftSituation* msg);
};

const ::atc_proto::AircraftMessage_Situation&
ClientToServer_UpdateAircraftSituation::_Internal::situation(const ClientToServer_UpdateAircraftSituation* msg) {
  return *msg->situation_;
}
ClientToServer_UpdateAircraftSituation::ClientToServer_UpdateAircraftSituation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.UpdateAircraftSituation)
}
ClientToServer_UpdateAircraftSituation::ClientToServer_UpdateAircraftSituation(const ClientToServer_UpdateAircraftSituation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_situation()) {
    situation_ = new ::atc_proto::AircraftMessage_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.UpdateAircraftSituation)
}

void ClientToServer_UpdateAircraftSituation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto.base);
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aircraft_id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(aircraft_id_));
}

ClientToServer_UpdateAircraftSituation::~ClientToServer_UpdateAircraftSituation() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.UpdateAircraftSituation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UpdateAircraftSituation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete situation_;
}

void ClientToServer_UpdateAircraftSituation::ArenaDtor(void* object) {
  ClientToServer_UpdateAircraftSituation* _this = reinterpret_cast< ClientToServer_UpdateAircraftSituation* >(object);
  (void)_this;
}
void ClientToServer_UpdateAircraftSituation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UpdateAircraftSituation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UpdateAircraftSituation& ClientToServer_UpdateAircraftSituation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UpdateAircraftSituation_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UpdateAircraftSituation::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UpdateAircraftSituation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.AircraftMessage.Situation situation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UpdateAircraftSituation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  // .atc_proto.AircraftMessage.Situation situation = 2;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.UpdateAircraftSituation)
  return target;
}

size_t ClientToServer_UpdateAircraftSituation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage.Situation situation = 2;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UpdateAircraftSituation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UpdateAircraftSituation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UpdateAircraftSituation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.UpdateAircraftSituation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.UpdateAircraftSituation)
    MergeFrom(*source);
  }
}

void ClientToServer_UpdateAircraftSituation::MergeFrom(const ClientToServer_UpdateAircraftSituation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_situation()) {
    _internal_mutable_situation()->::atc_proto::AircraftMessage_Situation::MergeFrom(from._internal_situation());
  }
  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_UpdateAircraftSituation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UpdateAircraftSituation::CopyFrom(const ClientToServer_UpdateAircraftSituation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.UpdateAircraftSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UpdateAircraftSituation::IsInitialized() const {
  return true;
}

void ClientToServer_UpdateAircraftSituation::InternalSwap(ClientToServer_UpdateAircraftSituation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer_UpdateAircraftSituation, aircraft_id_)
      + sizeof(ClientToServer_UpdateAircraftSituation::aircraft_id_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer_UpdateAircraftSituation, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UpdateAircraftSituation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_RemoveAircraft::InitAsDefaultInstance() {
}
class ClientToServer_RemoveAircraft::_Internal {
 public:
};

ClientToServer_RemoveAircraft::ClientToServer_RemoveAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.RemoveAircraft)
}
ClientToServer_RemoveAircraft::ClientToServer_RemoveAircraft(const ClientToServer_RemoveAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.RemoveAircraft)
}

void ClientToServer_RemoveAircraft::SharedCtor() {
  aircraft_id_ = 0u;
}

ClientToServer_RemoveAircraft::~ClientToServer_RemoveAircraft() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.RemoveAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_RemoveAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientToServer_RemoveAircraft::ArenaDtor(void* object) {
  ClientToServer_RemoveAircraft* _this = reinterpret_cast< ClientToServer_RemoveAircraft* >(object);
  (void)_this;
}
void ClientToServer_RemoveAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_RemoveAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_RemoveAircraft& ClientToServer_RemoveAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_RemoveAircraft_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_RemoveAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.RemoveAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_RemoveAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_RemoveAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.RemoveAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.RemoveAircraft)
  return target;
}

size_t ClientToServer_RemoveAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.RemoveAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_RemoveAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.RemoveAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_RemoveAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_RemoveAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.RemoveAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.RemoveAircraft)
    MergeFrom(*source);
  }
}

void ClientToServer_RemoveAircraft::MergeFrom(const ClientToServer_RemoveAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.RemoveAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_RemoveAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.RemoveAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_RemoveAircraft::CopyFrom(const ClientToServer_RemoveAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.RemoveAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_RemoveAircraft::IsInitialized() const {
  return true;
}

void ClientToServer_RemoveAircraft::InternalSwap(ClientToServer_RemoveAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_id_, other->aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_RemoveAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UserAcquireAircraft::InitAsDefaultInstance() {
}
class ClientToServer_UserAcquireAircraft::_Internal {
 public:
};

ClientToServer_UserAcquireAircraft::ClientToServer_UserAcquireAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.UserAcquireAircraft)
}
ClientToServer_UserAcquireAircraft::ClientToServer_UserAcquireAircraft(const ClientToServer_UserAcquireAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.UserAcquireAircraft)
}

void ClientToServer_UserAcquireAircraft::SharedCtor() {
  aircraft_id_ = 0u;
}

ClientToServer_UserAcquireAircraft::~ClientToServer_UserAcquireAircraft() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.UserAcquireAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UserAcquireAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientToServer_UserAcquireAircraft::ArenaDtor(void* object) {
  ClientToServer_UserAcquireAircraft* _this = reinterpret_cast< ClientToServer_UserAcquireAircraft* >(object);
  (void)_this;
}
void ClientToServer_UserAcquireAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UserAcquireAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UserAcquireAircraft& ClientToServer_UserAcquireAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UserAcquireAircraft_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UserAcquireAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.UserAcquireAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UserAcquireAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UserAcquireAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.UserAcquireAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.UserAcquireAircraft)
  return target;
}

size_t ClientToServer_UserAcquireAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.UserAcquireAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UserAcquireAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.UserAcquireAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UserAcquireAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UserAcquireAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.UserAcquireAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.UserAcquireAircraft)
    MergeFrom(*source);
  }
}

void ClientToServer_UserAcquireAircraft::MergeFrom(const ClientToServer_UserAcquireAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.UserAcquireAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_UserAcquireAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.UserAcquireAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UserAcquireAircraft::CopyFrom(const ClientToServer_UserAcquireAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.UserAcquireAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UserAcquireAircraft::IsInitialized() const {
  return true;
}

void ClientToServer_UserAcquireAircraft::InternalSwap(ClientToServer_UserAcquireAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_id_, other->aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UserAcquireAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UserUpdateAircraftSituation::InitAsDefaultInstance() {
  ::atc_proto::_ClientToServer_UserUpdateAircraftSituation_default_instance_._instance.get_mutable()->situation_ = const_cast< ::atc_proto::AircraftMessage_Situation*>(
      ::atc_proto::AircraftMessage_Situation::internal_default_instance());
}
class ClientToServer_UserUpdateAircraftSituation::_Internal {
 public:
  static const ::atc_proto::AircraftMessage_Situation& situation(const ClientToServer_UserUpdateAircraftSituation* msg);
};

const ::atc_proto::AircraftMessage_Situation&
ClientToServer_UserUpdateAircraftSituation::_Internal::situation(const ClientToServer_UserUpdateAircraftSituation* msg) {
  return *msg->situation_;
}
ClientToServer_UserUpdateAircraftSituation::ClientToServer_UserUpdateAircraftSituation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.UserUpdateAircraftSituation)
}
ClientToServer_UserUpdateAircraftSituation::ClientToServer_UserUpdateAircraftSituation(const ClientToServer_UserUpdateAircraftSituation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_situation()) {
    situation_ = new ::atc_proto::AircraftMessage_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.UserUpdateAircraftSituation)
}

void ClientToServer_UserUpdateAircraftSituation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto.base);
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aircraft_id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(aircraft_id_));
}

ClientToServer_UserUpdateAircraftSituation::~ClientToServer_UserUpdateAircraftSituation() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UserUpdateAircraftSituation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete situation_;
}

void ClientToServer_UserUpdateAircraftSituation::ArenaDtor(void* object) {
  ClientToServer_UserUpdateAircraftSituation* _this = reinterpret_cast< ClientToServer_UserUpdateAircraftSituation* >(object);
  (void)_this;
}
void ClientToServer_UserUpdateAircraftSituation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UserUpdateAircraftSituation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UserUpdateAircraftSituation& ClientToServer_UserUpdateAircraftSituation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UserUpdateAircraftSituation_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UserUpdateAircraftSituation::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UserUpdateAircraftSituation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.AircraftMessage.Situation situation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UserUpdateAircraftSituation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  // .atc_proto.AircraftMessage.Situation situation = 2;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  return target;
}

size_t ClientToServer_UserUpdateAircraftSituation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage.Situation situation = 2;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UserUpdateAircraftSituation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UserUpdateAircraftSituation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UserUpdateAircraftSituation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.UserUpdateAircraftSituation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.UserUpdateAircraftSituation)
    MergeFrom(*source);
  }
}

void ClientToServer_UserUpdateAircraftSituation::MergeFrom(const ClientToServer_UserUpdateAircraftSituation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_situation()) {
    _internal_mutable_situation()->::atc_proto::AircraftMessage_Situation::MergeFrom(from._internal_situation());
  }
  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_UserUpdateAircraftSituation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UserUpdateAircraftSituation::CopyFrom(const ClientToServer_UserUpdateAircraftSituation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.UserUpdateAircraftSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UserUpdateAircraftSituation::IsInitialized() const {
  return true;
}

void ClientToServer_UserUpdateAircraftSituation::InternalSwap(ClientToServer_UserUpdateAircraftSituation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer_UserUpdateAircraftSituation, aircraft_id_)
      + sizeof(ClientToServer_UserUpdateAircraftSituation::aircraft_id_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer_UserUpdateAircraftSituation, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UserUpdateAircraftSituation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UserReleaseAircraft::InitAsDefaultInstance() {
}
class ClientToServer_UserReleaseAircraft::_Internal {
 public:
};

ClientToServer_UserReleaseAircraft::ClientToServer_UserReleaseAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.UserReleaseAircraft)
}
ClientToServer_UserReleaseAircraft::ClientToServer_UserReleaseAircraft(const ClientToServer_UserReleaseAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.UserReleaseAircraft)
}

void ClientToServer_UserReleaseAircraft::SharedCtor() {
  aircraft_id_ = 0u;
}

ClientToServer_UserReleaseAircraft::~ClientToServer_UserReleaseAircraft() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.UserReleaseAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UserReleaseAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientToServer_UserReleaseAircraft::ArenaDtor(void* object) {
  ClientToServer_UserReleaseAircraft* _this = reinterpret_cast< ClientToServer_UserReleaseAircraft* >(object);
  (void)_this;
}
void ClientToServer_UserReleaseAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UserReleaseAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UserReleaseAircraft& ClientToServer_UserReleaseAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UserReleaseAircraft_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UserReleaseAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.UserReleaseAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UserReleaseAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UserReleaseAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.UserReleaseAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.UserReleaseAircraft)
  return target;
}

size_t ClientToServer_UserReleaseAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.UserReleaseAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UserReleaseAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.UserReleaseAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UserReleaseAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UserReleaseAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.UserReleaseAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.UserReleaseAircraft)
    MergeFrom(*source);
  }
}

void ClientToServer_UserReleaseAircraft::MergeFrom(const ClientToServer_UserReleaseAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.UserReleaseAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ClientToServer_UserReleaseAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.UserReleaseAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UserReleaseAircraft::CopyFrom(const ClientToServer_UserReleaseAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.UserReleaseAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UserReleaseAircraft::IsInitialized() const {
  return true;
}

void ClientToServer_UserReleaseAircraft::InternalSwap(ClientToServer_UserReleaseAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_id_, other->aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UserReleaseAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UserPttPressed::InitAsDefaultInstance() {
}
class ClientToServer_UserPttPressed::_Internal {
 public:
};

ClientToServer_UserPttPressed::ClientToServer_UserPttPressed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.UserPttPressed)
}
ClientToServer_UserPttPressed::ClientToServer_UserPttPressed(const ClientToServer_UserPttPressed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frequency_khz_ = from.frequency_khz_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.UserPttPressed)
}

void ClientToServer_UserPttPressed::SharedCtor() {
  frequency_khz_ = 0u;
}

ClientToServer_UserPttPressed::~ClientToServer_UserPttPressed() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.UserPttPressed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UserPttPressed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientToServer_UserPttPressed::ArenaDtor(void* object) {
  ClientToServer_UserPttPressed* _this = reinterpret_cast< ClientToServer_UserPttPressed* >(object);
  (void)_this;
}
void ClientToServer_UserPttPressed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UserPttPressed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UserPttPressed& ClientToServer_UserPttPressed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UserPttPressed_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UserPttPressed::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.UserPttPressed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frequency_khz_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UserPttPressed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frequency_khz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frequency_khz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UserPttPressed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.UserPttPressed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency_khz = 1;
  if (this->frequency_khz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frequency_khz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.UserPttPressed)
  return target;
}

size_t ClientToServer_UserPttPressed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.UserPttPressed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frequency_khz = 1;
  if (this->frequency_khz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_khz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UserPttPressed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.UserPttPressed)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UserPttPressed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UserPttPressed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.UserPttPressed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.UserPttPressed)
    MergeFrom(*source);
  }
}

void ClientToServer_UserPttPressed::MergeFrom(const ClientToServer_UserPttPressed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.UserPttPressed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frequency_khz() != 0) {
    _internal_set_frequency_khz(from._internal_frequency_khz());
  }
}

void ClientToServer_UserPttPressed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.UserPttPressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UserPttPressed::CopyFrom(const ClientToServer_UserPttPressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.UserPttPressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UserPttPressed::IsInitialized() const {
  return true;
}

void ClientToServer_UserPttPressed::InternalSwap(ClientToServer_UserPttPressed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(frequency_khz_, other->frequency_khz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UserPttPressed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_UserPttReleased::InitAsDefaultInstance() {
}
class ClientToServer_UserPttReleased::_Internal {
 public:
};

ClientToServer_UserPttReleased::ClientToServer_UserPttReleased(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.UserPttReleased)
}
ClientToServer_UserPttReleased::ClientToServer_UserPttReleased(const ClientToServer_UserPttReleased& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frequency_khz_ = from.frequency_khz_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.UserPttReleased)
}

void ClientToServer_UserPttReleased::SharedCtor() {
  frequency_khz_ = 0u;
}

ClientToServer_UserPttReleased::~ClientToServer_UserPttReleased() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.UserPttReleased)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_UserPttReleased::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientToServer_UserPttReleased::ArenaDtor(void* object) {
  ClientToServer_UserPttReleased* _this = reinterpret_cast< ClientToServer_UserPttReleased* >(object);
  (void)_this;
}
void ClientToServer_UserPttReleased::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_UserPttReleased::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_UserPttReleased& ClientToServer_UserPttReleased::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_UserPttReleased_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_UserPttReleased::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.UserPttReleased)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frequency_khz_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_UserPttReleased::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frequency_khz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frequency_khz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_UserPttReleased::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.UserPttReleased)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency_khz = 1;
  if (this->frequency_khz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frequency_khz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.UserPttReleased)
  return target;
}

size_t ClientToServer_UserPttReleased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.UserPttReleased)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frequency_khz = 1;
  if (this->frequency_khz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_khz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_UserPttReleased::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.UserPttReleased)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_UserPttReleased* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_UserPttReleased>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.UserPttReleased)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.UserPttReleased)
    MergeFrom(*source);
  }
}

void ClientToServer_UserPttReleased::MergeFrom(const ClientToServer_UserPttReleased& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.UserPttReleased)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frequency_khz() != 0) {
    _internal_set_frequency_khz(from._internal_frequency_khz());
  }
}

void ClientToServer_UserPttReleased::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.UserPttReleased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_UserPttReleased::CopyFrom(const ClientToServer_UserPttReleased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.UserPttReleased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_UserPttReleased::IsInitialized() const {
  return true;
}

void ClientToServer_UserPttReleased::InternalSwap(ClientToServer_UserPttReleased* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(frequency_khz_, other->frequency_khz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_UserPttReleased::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_QueryTraffic::InitAsDefaultInstance() {
}
class ClientToServer_QueryTraffic::_Internal {
 public:
};

ClientToServer_QueryTraffic::ClientToServer_QueryTraffic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.QueryTraffic)
}
ClientToServer_QueryTraffic::ClientToServer_QueryTraffic(const ClientToServer_QueryTraffic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cancellation_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cancellation_key().empty()) {
    cancellation_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cancellation_key(),
      GetArena());
  }
  ::memcpy(&min_lat_, &from.min_lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.QueryTraffic)
}

void ClientToServer_QueryTraffic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_QueryTraffic_atc_2eproto.base);
  cancellation_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
}

ClientToServer_QueryTraffic::~ClientToServer_QueryTraffic() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.QueryTraffic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_QueryTraffic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cancellation_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServer_QueryTraffic::ArenaDtor(void* object) {
  ClientToServer_QueryTraffic* _this = reinterpret_cast< ClientToServer_QueryTraffic* >(object);
  (void)_this;
}
void ClientToServer_QueryTraffic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_QueryTraffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_QueryTraffic& ClientToServer_QueryTraffic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_QueryTraffic_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_QueryTraffic::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.QueryTraffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cancellation_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_QueryTraffic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double min_lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          min_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_lat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_lon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          max_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string cancellation_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cancellation_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ClientToServer.QueryTraffic.cancellation_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_QueryTraffic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.QueryTraffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min_lat = 1;
  if (!(this->min_lat() <= 0 && this->min_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_lat(), target);
  }

  // double min_lon = 2;
  if (!(this->min_lon() <= 0 && this->min_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_lon(), target);
  }

  // double max_lat = 3;
  if (!(this->max_lat() <= 0 && this->max_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_lat(), target);
  }

  // double max_lon = 4;
  if (!(this->max_lon() <= 0 && this->max_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_lon(), target);
  }

  // string cancellation_key = 5;
  if (this->cancellation_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancellation_key().data(), static_cast<int>(this->_internal_cancellation_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ClientToServer.QueryTraffic.cancellation_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cancellation_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.QueryTraffic)
  return target;
}

size_t ClientToServer_QueryTraffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.QueryTraffic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cancellation_key = 5;
  if (this->cancellation_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancellation_key());
  }

  // double min_lat = 1;
  if (!(this->min_lat() <= 0 && this->min_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_lon = 2;
  if (!(this->min_lon() <= 0 && this->min_lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_lat = 3;
  if (!(this->max_lat() <= 0 && this->max_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_lon = 4;
  if (!(this->max_lon() <= 0 && this->max_lon() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_QueryTraffic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.QueryTraffic)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_QueryTraffic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_QueryTraffic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.QueryTraffic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.QueryTraffic)
    MergeFrom(*source);
  }
}

void ClientToServer_QueryTraffic::MergeFrom(const ClientToServer_QueryTraffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.QueryTraffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cancellation_key().size() > 0) {
    _internal_set_cancellation_key(from._internal_cancellation_key());
  }
  if (!(from.min_lat() <= 0 && from.min_lat() >= 0)) {
    _internal_set_min_lat(from._internal_min_lat());
  }
  if (!(from.min_lon() <= 0 && from.min_lon() >= 0)) {
    _internal_set_min_lon(from._internal_min_lon());
  }
  if (!(from.max_lat() <= 0 && from.max_lat() >= 0)) {
    _internal_set_max_lat(from._internal_max_lat());
  }
  if (!(from.max_lon() <= 0 && from.max_lon() >= 0)) {
    _internal_set_max_lon(from._internal_max_lon());
  }
}

void ClientToServer_QueryTraffic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.QueryTraffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_QueryTraffic::CopyFrom(const ClientToServer_QueryTraffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.QueryTraffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_QueryTraffic::IsInitialized() const {
  return true;
}

void ClientToServer_QueryTraffic::InternalSwap(ClientToServer_QueryTraffic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cancellation_key_.Swap(&other->cancellation_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer_QueryTraffic, max_lon_)
      + sizeof(ClientToServer_QueryTraffic::max_lon_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer_QueryTraffic, min_lat_)>(
          reinterpret_cast<char*>(&min_lat_),
          reinterpret_cast<char*>(&other->min_lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_QueryTraffic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer_CancelTrafficQuery::InitAsDefaultInstance() {
}
class ClientToServer_CancelTrafficQuery::_Internal {
 public:
};

ClientToServer_CancelTrafficQuery::ClientToServer_CancelTrafficQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer.CancelTrafficQuery)
}
ClientToServer_CancelTrafficQuery::ClientToServer_CancelTrafficQuery(const ClientToServer_CancelTrafficQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cancellation_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cancellation_key().empty()) {
    cancellation_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cancellation_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer.CancelTrafficQuery)
}

void ClientToServer_CancelTrafficQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_CancelTrafficQuery_atc_2eproto.base);
  cancellation_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientToServer_CancelTrafficQuery::~ClientToServer_CancelTrafficQuery() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer.CancelTrafficQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer_CancelTrafficQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cancellation_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServer_CancelTrafficQuery::ArenaDtor(void* object) {
  ClientToServer_CancelTrafficQuery* _this = reinterpret_cast< ClientToServer_CancelTrafficQuery* >(object);
  (void)_this;
}
void ClientToServer_CancelTrafficQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer_CancelTrafficQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer_CancelTrafficQuery& ClientToServer_CancelTrafficQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_CancelTrafficQuery_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer_CancelTrafficQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer.CancelTrafficQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cancellation_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer_CancelTrafficQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cancellation_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cancellation_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ClientToServer.CancelTrafficQuery.cancellation_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer_CancelTrafficQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer.CancelTrafficQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cancellation_key = 1;
  if (this->cancellation_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancellation_key().data(), static_cast<int>(this->_internal_cancellation_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ClientToServer.CancelTrafficQuery.cancellation_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cancellation_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer.CancelTrafficQuery)
  return target;
}

size_t ClientToServer_CancelTrafficQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer.CancelTrafficQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cancellation_key = 1;
  if (this->cancellation_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancellation_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_CancelTrafficQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer.CancelTrafficQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_CancelTrafficQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer_CancelTrafficQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer.CancelTrafficQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer.CancelTrafficQuery)
    MergeFrom(*source);
  }
}

void ClientToServer_CancelTrafficQuery::MergeFrom(const ClientToServer_CancelTrafficQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer.CancelTrafficQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cancellation_key().size() > 0) {
    _internal_set_cancellation_key(from._internal_cancellation_key());
  }
}

void ClientToServer_CancelTrafficQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer.CancelTrafficQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_CancelTrafficQuery::CopyFrom(const ClientToServer_CancelTrafficQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer.CancelTrafficQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_CancelTrafficQuery::IsInitialized() const {
  return true;
}

void ClientToServer_CancelTrafficQuery::InternalSwap(ClientToServer_CancelTrafficQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cancellation_key_.Swap(&other->cancellation_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer_CancelTrafficQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientToServer::InitAsDefaultInstance() {
  ::atc_proto::_ClientToServer_default_instance_._instance.get_mutable()->sent_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.connect_ = const_cast< ::atc_proto::ClientToServer_Connect*>(
      ::atc_proto::ClientToServer_Connect::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.query_airport_ = const_cast< ::atc_proto::ClientToServer_QueryAirport*>(
      ::atc_proto::ClientToServer_QueryAirport::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.create_aircraft_ = const_cast< ::atc_proto::ClientToServer_CreateAircraft*>(
      ::atc_proto::ClientToServer_CreateAircraft::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.update_aircraft_situation_ = const_cast< ::atc_proto::ClientToServer_UpdateAircraftSituation*>(
      ::atc_proto::ClientToServer_UpdateAircraftSituation::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.remove_aircraft_ = const_cast< ::atc_proto::ClientToServer_RemoveAircraft*>(
      ::atc_proto::ClientToServer_RemoveAircraft::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.query_taxi_path_ = const_cast< ::atc_proto::ClientToServer_QueryTaxiPath*>(
      ::atc_proto::ClientToServer_QueryTaxiPath::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.query_traffic_ = const_cast< ::atc_proto::ClientToServer_QueryTraffic*>(
      ::atc_proto::ClientToServer_QueryTraffic::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.cancel_traffic_query_ = const_cast< ::atc_proto::ClientToServer_CancelTrafficQuery*>(
      ::atc_proto::ClientToServer_CancelTrafficQuery::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.user_acquire_aircraft_ = const_cast< ::atc_proto::ClientToServer_UserAcquireAircraft*>(
      ::atc_proto::ClientToServer_UserAcquireAircraft::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.user_update_aircraft_situation_ = const_cast< ::atc_proto::ClientToServer_UserUpdateAircraftSituation*>(
      ::atc_proto::ClientToServer_UserUpdateAircraftSituation::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.user_release_aircraft_ = const_cast< ::atc_proto::ClientToServer_UserReleaseAircraft*>(
      ::atc_proto::ClientToServer_UserReleaseAircraft::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.user_ptt_pressed_ = const_cast< ::atc_proto::ClientToServer_UserPttPressed*>(
      ::atc_proto::ClientToServer_UserPttPressed::internal_default_instance());
  ::atc_proto::_ClientToServer_default_instance_.user_ptt_released_ = const_cast< ::atc_proto::ClientToServer_UserPttReleased*>(
      ::atc_proto::ClientToServer_UserPttReleased::internal_default_instance());
}
class ClientToServer::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_at(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_Connect& connect(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_QueryAirport& query_airport(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_CreateAircraft& create_aircraft(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_UpdateAircraftSituation& update_aircraft_situation(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_RemoveAircraft& remove_aircraft(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_QueryTaxiPath& query_taxi_path(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_QueryTraffic& query_traffic(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_CancelTrafficQuery& cancel_traffic_query(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_UserAcquireAircraft& user_acquire_aircraft(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_UserUpdateAircraftSituation& user_update_aircraft_situation(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_UserReleaseAircraft& user_release_aircraft(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_UserPttPressed& user_ptt_pressed(const ClientToServer* msg);
  static const ::atc_proto::ClientToServer_UserPttReleased& user_ptt_released(const ClientToServer* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ClientToServer::_Internal::sent_at(const ClientToServer* msg) {
  return *msg->sent_at_;
}
const ::atc_proto::ClientToServer_Connect&
ClientToServer::_Internal::connect(const ClientToServer* msg) {
  return *msg->payload_.connect_;
}
const ::atc_proto::ClientToServer_QueryAirport&
ClientToServer::_Internal::query_airport(const ClientToServer* msg) {
  return *msg->payload_.query_airport_;
}
const ::atc_proto::ClientToServer_CreateAircraft&
ClientToServer::_Internal::create_aircraft(const ClientToServer* msg) {
  return *msg->payload_.create_aircraft_;
}
const ::atc_proto::ClientToServer_UpdateAircraftSituation&
ClientToServer::_Internal::update_aircraft_situation(const ClientToServer* msg) {
  return *msg->payload_.update_aircraft_situation_;
}
const ::atc_proto::ClientToServer_RemoveAircraft&
ClientToServer::_Internal::remove_aircraft(const ClientToServer* msg) {
  return *msg->payload_.remove_aircraft_;
}
const ::atc_proto::ClientToServer_QueryTaxiPath&
ClientToServer::_Internal::query_taxi_path(const ClientToServer* msg) {
  return *msg->payload_.query_taxi_path_;
}
const ::atc_proto::ClientToServer_QueryTraffic&
ClientToServer::_Internal::query_traffic(const ClientToServer* msg) {
  return *msg->payload_.query_traffic_;
}
const ::atc_proto::ClientToServer_CancelTrafficQuery&
ClientToServer::_Internal::cancel_traffic_query(const ClientToServer* msg) {
  return *msg->payload_.cancel_traffic_query_;
}
const ::atc_proto::ClientToServer_UserAcquireAircraft&
ClientToServer::_Internal::user_acquire_aircraft(const ClientToServer* msg) {
  return *msg->payload_.user_acquire_aircraft_;
}
const ::atc_proto::ClientToServer_UserUpdateAircraftSituation&
ClientToServer::_Internal::user_update_aircraft_situation(const ClientToServer* msg) {
  return *msg->payload_.user_update_aircraft_situation_;
}
const ::atc_proto::ClientToServer_UserReleaseAircraft&
ClientToServer::_Internal::user_release_aircraft(const ClientToServer* msg) {
  return *msg->payload_.user_release_aircraft_;
}
const ::atc_proto::ClientToServer_UserPttPressed&
ClientToServer::_Internal::user_ptt_pressed(const ClientToServer* msg) {
  return *msg->payload_.user_ptt_pressed_;
}
const ::atc_proto::ClientToServer_UserPttReleased&
ClientToServer::_Internal::user_ptt_released(const ClientToServer* msg) {
  return *msg->payload_.user_ptt_released_;
}
void ClientToServer::clear_sent_at() {
  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
}
void ClientToServer::set_allocated_connect(::atc_proto::ClientToServer_Connect* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connect);
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    payload_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.connect)
}
void ClientToServer::set_allocated_query_airport(::atc_proto::ClientToServer_QueryAirport* query_airport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (query_airport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_airport);
    if (message_arena != submessage_arena) {
      query_airport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_airport, submessage_arena);
    }
    set_has_query_airport();
    payload_.query_airport_ = query_airport;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.query_airport)
}
void ClientToServer::set_allocated_create_aircraft(::atc_proto::ClientToServer_CreateAircraft* create_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (create_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_aircraft);
    if (message_arena != submessage_arena) {
      create_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_aircraft, submessage_arena);
    }
    set_has_create_aircraft();
    payload_.create_aircraft_ = create_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.create_aircraft)
}
void ClientToServer::set_allocated_update_aircraft_situation(::atc_proto::ClientToServer_UpdateAircraftSituation* update_aircraft_situation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (update_aircraft_situation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_aircraft_situation);
    if (message_arena != submessage_arena) {
      update_aircraft_situation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_aircraft_situation, submessage_arena);
    }
    set_has_update_aircraft_situation();
    payload_.update_aircraft_situation_ = update_aircraft_situation;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.update_aircraft_situation)
}
void ClientToServer::set_allocated_remove_aircraft(::atc_proto::ClientToServer_RemoveAircraft* remove_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (remove_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_aircraft);
    if (message_arena != submessage_arena) {
      remove_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_aircraft, submessage_arena);
    }
    set_has_remove_aircraft();
    payload_.remove_aircraft_ = remove_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.remove_aircraft)
}
void ClientToServer::set_allocated_query_taxi_path(::atc_proto::ClientToServer_QueryTaxiPath* query_taxi_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (query_taxi_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_taxi_path);
    if (message_arena != submessage_arena) {
      query_taxi_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_taxi_path, submessage_arena);
    }
    set_has_query_taxi_path();
    payload_.query_taxi_path_ = query_taxi_path;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.query_taxi_path)
}
void ClientToServer::set_allocated_query_traffic(::atc_proto::ClientToServer_QueryTraffic* query_traffic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (query_traffic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_traffic);
    if (message_arena != submessage_arena) {
      query_traffic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_traffic, submessage_arena);
    }
    set_has_query_traffic();
    payload_.query_traffic_ = query_traffic;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.query_traffic)
}
void ClientToServer::set_allocated_cancel_traffic_query(::atc_proto::ClientToServer_CancelTrafficQuery* cancel_traffic_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (cancel_traffic_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_traffic_query);
    if (message_arena != submessage_arena) {
      cancel_traffic_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_traffic_query, submessage_arena);
    }
    set_has_cancel_traffic_query();
    payload_.cancel_traffic_query_ = cancel_traffic_query;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.cancel_traffic_query)
}
void ClientToServer::set_allocated_user_acquire_aircraft(::atc_proto::ClientToServer_UserAcquireAircraft* user_acquire_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (user_acquire_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_acquire_aircraft);
    if (message_arena != submessage_arena) {
      user_acquire_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_acquire_aircraft, submessage_arena);
    }
    set_has_user_acquire_aircraft();
    payload_.user_acquire_aircraft_ = user_acquire_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.user_acquire_aircraft)
}
void ClientToServer::set_allocated_user_update_aircraft_situation(::atc_proto::ClientToServer_UserUpdateAircraftSituation* user_update_aircraft_situation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (user_update_aircraft_situation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_update_aircraft_situation);
    if (message_arena != submessage_arena) {
      user_update_aircraft_situation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_update_aircraft_situation, submessage_arena);
    }
    set_has_user_update_aircraft_situation();
    payload_.user_update_aircraft_situation_ = user_update_aircraft_situation;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.user_update_aircraft_situation)
}
void ClientToServer::set_allocated_user_release_aircraft(::atc_proto::ClientToServer_UserReleaseAircraft* user_release_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (user_release_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_release_aircraft);
    if (message_arena != submessage_arena) {
      user_release_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_release_aircraft, submessage_arena);
    }
    set_has_user_release_aircraft();
    payload_.user_release_aircraft_ = user_release_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.user_release_aircraft)
}
void ClientToServer::set_allocated_user_ptt_pressed(::atc_proto::ClientToServer_UserPttPressed* user_ptt_pressed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (user_ptt_pressed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_ptt_pressed);
    if (message_arena != submessage_arena) {
      user_ptt_pressed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_ptt_pressed, submessage_arena);
    }
    set_has_user_ptt_pressed();
    payload_.user_ptt_pressed_ = user_ptt_pressed;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.user_ptt_pressed)
}
void ClientToServer::set_allocated_user_ptt_released(::atc_proto::ClientToServer_UserPttReleased* user_ptt_released) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (user_ptt_released) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_ptt_released);
    if (message_arena != submessage_arena) {
      user_ptt_released = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_ptt_released, submessage_arena);
    }
    set_has_user_ptt_released();
    payload_.user_ptt_released_ = user_ptt_released;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ClientToServer.user_ptt_released)
}
ClientToServer::ClientToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ClientToServer)
}
ClientToServer::ClientToServer(const ClientToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sent_at()) {
    sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_at_);
  } else {
    sent_at_ = nullptr;
  }
  id_ = from.id_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kConnect: {
      _internal_mutable_connect()->::atc_proto::ClientToServer_Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kQueryAirport: {
      _internal_mutable_query_airport()->::atc_proto::ClientToServer_QueryAirport::MergeFrom(from._internal_query_airport());
      break;
    }
    case kCreateAircraft: {
      _internal_mutable_create_aircraft()->::atc_proto::ClientToServer_CreateAircraft::MergeFrom(from._internal_create_aircraft());
      break;
    }
    case kUpdateAircraftSituation: {
      _internal_mutable_update_aircraft_situation()->::atc_proto::ClientToServer_UpdateAircraftSituation::MergeFrom(from._internal_update_aircraft_situation());
      break;
    }
    case kRemoveAircraft: {
      _internal_mutable_remove_aircraft()->::atc_proto::ClientToServer_RemoveAircraft::MergeFrom(from._internal_remove_aircraft());
      break;
    }
    case kQueryTaxiPath: {
      _internal_mutable_query_taxi_path()->::atc_proto::ClientToServer_QueryTaxiPath::MergeFrom(from._internal_query_taxi_path());
      break;
    }
    case kQueryTraffic: {
      _internal_mutable_query_traffic()->::atc_proto::ClientToServer_QueryTraffic::MergeFrom(from._internal_query_traffic());
      break;
    }
    case kCancelTrafficQuery: {
      _internal_mutable_cancel_traffic_query()->::atc_proto::ClientToServer_CancelTrafficQuery::MergeFrom(from._internal_cancel_traffic_query());
      break;
    }
    case kUserAcquireAircraft: {
      _internal_mutable_user_acquire_aircraft()->::atc_proto::ClientToServer_UserAcquireAircraft::MergeFrom(from._internal_user_acquire_aircraft());
      break;
    }
    case kUserUpdateAircraftSituation: {
      _internal_mutable_user_update_aircraft_situation()->::atc_proto::ClientToServer_UserUpdateAircraftSituation::MergeFrom(from._internal_user_update_aircraft_situation());
      break;
    }
    case kUserReleaseAircraft: {
      _internal_mutable_user_release_aircraft()->::atc_proto::ClientToServer_UserReleaseAircraft::MergeFrom(from._internal_user_release_aircraft());
      break;
    }
    case kUserPttPressed: {
      _internal_mutable_user_ptt_pressed()->::atc_proto::ClientToServer_UserPttPressed::MergeFrom(from._internal_user_ptt_pressed());
      break;
    }
    case kUserPttReleased: {
      _internal_mutable_user_ptt_released()->::atc_proto::ClientToServer_UserPttReleased::MergeFrom(from._internal_user_ptt_released());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ClientToServer)
}

void ClientToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_atc_2eproto.base);
  ::memset(&sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&sent_at_)) + sizeof(id_));
  clear_has_payload();
}

ClientToServer::~ClientToServer() {
  // @@protoc_insertion_point(destructor:atc_proto.ClientToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sent_at_;
  if (has_payload()) {
    clear_payload();
  }
}

void ClientToServer::ArenaDtor(void* object) {
  ClientToServer* _this = reinterpret_cast< ClientToServer* >(object);
  (void)_this;
}
void ClientToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer& ClientToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_atc_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:atc_proto.ClientToServer)
  switch (payload_case()) {
    case kConnect: {
      if (GetArena() == nullptr) {
        delete payload_.connect_;
      }
      break;
    }
    case kQueryAirport: {
      if (GetArena() == nullptr) {
        delete payload_.query_airport_;
      }
      break;
    }
    case kCreateAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.create_aircraft_;
      }
      break;
    }
    case kUpdateAircraftSituation: {
      if (GetArena() == nullptr) {
        delete payload_.update_aircraft_situation_;
      }
      break;
    }
    case kRemoveAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.remove_aircraft_;
      }
      break;
    }
    case kQueryTaxiPath: {
      if (GetArena() == nullptr) {
        delete payload_.query_taxi_path_;
      }
      break;
    }
    case kQueryTraffic: {
      if (GetArena() == nullptr) {
        delete payload_.query_traffic_;
      }
      break;
    }
    case kCancelTrafficQuery: {
      if (GetArena() == nullptr) {
        delete payload_.cancel_traffic_query_;
      }
      break;
    }
    case kUserAcquireAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.user_acquire_aircraft_;
      }
      break;
    }
    case kUserUpdateAircraftSituation: {
      if (GetArena() == nullptr) {
        delete payload_.user_update_aircraft_situation_;
      }
      break;
    }
    case kUserReleaseAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.user_release_aircraft_;
      }
      break;
    }
    case kUserPttPressed: {
      if (GetArena() == nullptr) {
        delete payload_.user_ptt_pressed_;
      }
      break;
    }
    case kUserPttReleased: {
      if (GetArena() == nullptr) {
        delete payload_.user_ptt_released_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ClientToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.Connect connect = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.QueryAirport query_airport = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_airport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.CreateAircraft create_aircraft = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.UpdateAircraftSituation update_aircraft_situation = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_aircraft_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.RemoveAircraft remove_aircraft = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.QueryTaxiPath query_taxi_path = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_taxi_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.QueryTraffic query_traffic = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_traffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.CancelTrafficQuery cancel_traffic_query = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_traffic_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.UserAcquireAircraft user_acquire_aircraft = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_acquire_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.UserUpdateAircraftSituation user_update_aircraft_situation = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_update_aircraft_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.UserReleaseAircraft user_release_aircraft = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_release_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.UserPttPressed user_ptt_pressed = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_ptt_pressed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ClientToServer.UserPttReleased user_ptt_released = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_ptt_released(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp sent_at = 2;
  if (this->has_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sent_at(this), target, stream);
  }

  // .atc_proto.ClientToServer.Connect connect = 101;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::connect(this), target, stream);
  }

  // .atc_proto.ClientToServer.QueryAirport query_airport = 102;
  if (_internal_has_query_airport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::query_airport(this), target, stream);
  }

  // .atc_proto.ClientToServer.CreateAircraft create_aircraft = 103;
  if (_internal_has_create_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::create_aircraft(this), target, stream);
  }

  // .atc_proto.ClientToServer.UpdateAircraftSituation update_aircraft_situation = 104;
  if (_internal_has_update_aircraft_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::update_aircraft_situation(this), target, stream);
  }

  // .atc_proto.ClientToServer.RemoveAircraft remove_aircraft = 105;
  if (_internal_has_remove_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::remove_aircraft(this), target, stream);
  }

  // .atc_proto.ClientToServer.QueryTaxiPath query_taxi_path = 106;
  if (_internal_has_query_taxi_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::query_taxi_path(this), target, stream);
  }

  // .atc_proto.ClientToServer.QueryTraffic query_traffic = 107;
  if (_internal_has_query_traffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::query_traffic(this), target, stream);
  }

  // .atc_proto.ClientToServer.CancelTrafficQuery cancel_traffic_query = 108;
  if (_internal_has_cancel_traffic_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::cancel_traffic_query(this), target, stream);
  }

  // .atc_proto.ClientToServer.UserAcquireAircraft user_acquire_aircraft = 109;
  if (_internal_has_user_acquire_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        109, _Internal::user_acquire_aircraft(this), target, stream);
  }

  // .atc_proto.ClientToServer.UserUpdateAircraftSituation user_update_aircraft_situation = 110;
  if (_internal_has_user_update_aircraft_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::user_update_aircraft_situation(this), target, stream);
  }

  // .atc_proto.ClientToServer.UserReleaseAircraft user_release_aircraft = 111;
  if (_internal_has_user_release_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        111, _Internal::user_release_aircraft(this), target, stream);
  }

  // .atc_proto.ClientToServer.UserPttPressed user_ptt_pressed = 112;
  if (_internal_has_user_ptt_pressed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::user_ptt_pressed(this), target, stream);
  }

  // .atc_proto.ClientToServer.UserPttReleased user_ptt_released = 113;
  if (_internal_has_user_ptt_released()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        113, _Internal::user_ptt_released(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ClientToServer)
  return target;
}

size_t ClientToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ClientToServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sent_at = 2;
  if (this->has_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_at_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  switch (payload_case()) {
    // .atc_proto.ClientToServer.Connect connect = 101;
    case kConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.connect_);
      break;
    }
    // .atc_proto.ClientToServer.QueryAirport query_airport = 102;
    case kQueryAirport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.query_airport_);
      break;
    }
    // .atc_proto.ClientToServer.CreateAircraft create_aircraft = 103;
    case kCreateAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_aircraft_);
      break;
    }
    // .atc_proto.ClientToServer.UpdateAircraftSituation update_aircraft_situation = 104;
    case kUpdateAircraftSituation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.update_aircraft_situation_);
      break;
    }
    // .atc_proto.ClientToServer.RemoveAircraft remove_aircraft = 105;
    case kRemoveAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.remove_aircraft_);
      break;
    }
    // .atc_proto.ClientToServer.QueryTaxiPath query_taxi_path = 106;
    case kQueryTaxiPath: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.query_taxi_path_);
      break;
    }
    // .atc_proto.ClientToServer.QueryTraffic query_traffic = 107;
    case kQueryTraffic: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.query_traffic_);
      break;
    }
    // .atc_proto.ClientToServer.CancelTrafficQuery cancel_traffic_query = 108;
    case kCancelTrafficQuery: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.cancel_traffic_query_);
      break;
    }
    // .atc_proto.ClientToServer.UserAcquireAircraft user_acquire_aircraft = 109;
    case kUserAcquireAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_acquire_aircraft_);
      break;
    }
    // .atc_proto.ClientToServer.UserUpdateAircraftSituation user_update_aircraft_situation = 110;
    case kUserUpdateAircraftSituation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_update_aircraft_situation_);
      break;
    }
    // .atc_proto.ClientToServer.UserReleaseAircraft user_release_aircraft = 111;
    case kUserReleaseAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_release_aircraft_);
      break;
    }
    // .atc_proto.ClientToServer.UserPttPressed user_ptt_pressed = 112;
    case kUserPttPressed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_ptt_pressed_);
      break;
    }
    // .atc_proto.ClientToServer.UserPttReleased user_ptt_released = 113;
    case kUserPttReleased: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_ptt_released_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ClientToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ClientToServer)
    MergeFrom(*source);
  }
}

void ClientToServer::MergeFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sent_at()) {
    _internal_mutable_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.payload_case()) {
    case kConnect: {
      _internal_mutable_connect()->::atc_proto::ClientToServer_Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kQueryAirport: {
      _internal_mutable_query_airport()->::atc_proto::ClientToServer_QueryAirport::MergeFrom(from._internal_query_airport());
      break;
    }
    case kCreateAircraft: {
      _internal_mutable_create_aircraft()->::atc_proto::ClientToServer_CreateAircraft::MergeFrom(from._internal_create_aircraft());
      break;
    }
    case kUpdateAircraftSituation: {
      _internal_mutable_update_aircraft_situation()->::atc_proto::ClientToServer_UpdateAircraftSituation::MergeFrom(from._internal_update_aircraft_situation());
      break;
    }
    case kRemoveAircraft: {
      _internal_mutable_remove_aircraft()->::atc_proto::ClientToServer_RemoveAircraft::MergeFrom(from._internal_remove_aircraft());
      break;
    }
    case kQueryTaxiPath: {
      _internal_mutable_query_taxi_path()->::atc_proto::ClientToServer_QueryTaxiPath::MergeFrom(from._internal_query_taxi_path());
      break;
    }
    case kQueryTraffic: {
      _internal_mutable_query_traffic()->::atc_proto::ClientToServer_QueryTraffic::MergeFrom(from._internal_query_traffic());
      break;
    }
    case kCancelTrafficQuery: {
      _internal_mutable_cancel_traffic_query()->::atc_proto::ClientToServer_CancelTrafficQuery::MergeFrom(from._internal_cancel_traffic_query());
      break;
    }
    case kUserAcquireAircraft: {
      _internal_mutable_user_acquire_aircraft()->::atc_proto::ClientToServer_UserAcquireAircraft::MergeFrom(from._internal_user_acquire_aircraft());
      break;
    }
    case kUserUpdateAircraftSituation: {
      _internal_mutable_user_update_aircraft_situation()->::atc_proto::ClientToServer_UserUpdateAircraftSituation::MergeFrom(from._internal_user_update_aircraft_situation());
      break;
    }
    case kUserReleaseAircraft: {
      _internal_mutable_user_release_aircraft()->::atc_proto::ClientToServer_UserReleaseAircraft::MergeFrom(from._internal_user_release_aircraft());
      break;
    }
    case kUserPttPressed: {
      _internal_mutable_user_ptt_pressed()->::atc_proto::ClientToServer_UserPttPressed::MergeFrom(from._internal_user_ptt_pressed());
      break;
    }
    case kUserPttReleased: {
      _internal_mutable_user_ptt_released()->::atc_proto::ClientToServer_UserPttReleased::MergeFrom(from._internal_user_ptt_released());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void ClientToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer::IsInitialized() const {
  return true;
}

void ClientToServer::InternalSwap(ClientToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientToServer, id_)
      + sizeof(ClientToServer::id_)
      - PROTOBUF_FIELD_OFFSET(ClientToServer, sent_at_)>(
          reinterpret_cast<char*>(&sent_at_),
          reinterpret_cast<char*>(&other->sent_at_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_FaultDeclined::InitAsDefaultInstance() {
}
class ServerToClient_FaultDeclined::_Internal {
 public:
};

ServerToClient_FaultDeclined::ServerToClient_FaultDeclined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.FaultDeclined)
}
ServerToClient_FaultDeclined::ServerToClient_FaultDeclined(const ServerToClient_FaultDeclined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.FaultDeclined)
}

void ServerToClient_FaultDeclined::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_FaultDeclined_atc_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerToClient_FaultDeclined::~ServerToClient_FaultDeclined() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.FaultDeclined)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_FaultDeclined::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToClient_FaultDeclined::ArenaDtor(void* object) {
  ServerToClient_FaultDeclined* _this = reinterpret_cast< ServerToClient_FaultDeclined* >(object);
  (void)_this;
}
void ServerToClient_FaultDeclined::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_FaultDeclined::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_FaultDeclined& ServerToClient_FaultDeclined::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_FaultDeclined_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_FaultDeclined::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.FaultDeclined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_FaultDeclined::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ServerToClient.FaultDeclined.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_FaultDeclined::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.FaultDeclined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ServerToClient.FaultDeclined.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.FaultDeclined)
  return target;
}

size_t ServerToClient_FaultDeclined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.FaultDeclined)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_FaultDeclined::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.FaultDeclined)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_FaultDeclined* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_FaultDeclined>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.FaultDeclined)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.FaultDeclined)
    MergeFrom(*source);
  }
}

void ServerToClient_FaultDeclined::MergeFrom(const ServerToClient_FaultDeclined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.FaultDeclined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void ServerToClient_FaultDeclined::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.FaultDeclined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_FaultDeclined::CopyFrom(const ServerToClient_FaultDeclined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.FaultDeclined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_FaultDeclined::IsInitialized() const {
  return true;
}

void ServerToClient_FaultDeclined::InternalSwap(ServerToClient_FaultDeclined* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_FaultDeclined::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_FaultNotFound::InitAsDefaultInstance() {
}
class ServerToClient_FaultNotFound::_Internal {
 public:
};

ServerToClient_FaultNotFound::ServerToClient_FaultNotFound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.FaultNotFound)
}
ServerToClient_FaultNotFound::ServerToClient_FaultNotFound(const ServerToClient_FaultNotFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.FaultNotFound)
}

void ServerToClient_FaultNotFound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_FaultNotFound_atc_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerToClient_FaultNotFound::~ServerToClient_FaultNotFound() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.FaultNotFound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_FaultNotFound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToClient_FaultNotFound::ArenaDtor(void* object) {
  ServerToClient_FaultNotFound* _this = reinterpret_cast< ServerToClient_FaultNotFound* >(object);
  (void)_this;
}
void ServerToClient_FaultNotFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_FaultNotFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_FaultNotFound& ServerToClient_FaultNotFound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_FaultNotFound_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_FaultNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.FaultNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_FaultNotFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ServerToClient.FaultNotFound.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_FaultNotFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.FaultNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ServerToClient.FaultNotFound.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.FaultNotFound)
  return target;
}

size_t ServerToClient_FaultNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.FaultNotFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_FaultNotFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.FaultNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_FaultNotFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_FaultNotFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.FaultNotFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.FaultNotFound)
    MergeFrom(*source);
  }
}

void ServerToClient_FaultNotFound::MergeFrom(const ServerToClient_FaultNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.FaultNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void ServerToClient_FaultNotFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.FaultNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_FaultNotFound::CopyFrom(const ServerToClient_FaultNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.FaultNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_FaultNotFound::IsInitialized() const {
  return true;
}

void ServerToClient_FaultNotFound::InternalSwap(ServerToClient_FaultNotFound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_FaultNotFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyConnect::InitAsDefaultInstance() {
}
class ServerToClient_ReplyConnect::_Internal {
 public:
};

ServerToClient_ReplyConnect::ServerToClient_ReplyConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.ReplyConnect)
}
ServerToClient_ReplyConnect::ServerToClient_ReplyConnect(const ServerToClient_ReplyConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_banner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_banner().empty()) {
    server_banner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_banner(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.ReplyConnect)
}

void ServerToClient_ReplyConnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyConnect_atc_2eproto.base);
  server_banner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerToClient_ReplyConnect::~ServerToClient_ReplyConnect() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.ReplyConnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_banner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerToClient_ReplyConnect::ArenaDtor(void* object) {
  ServerToClient_ReplyConnect* _this = reinterpret_cast< ServerToClient_ReplyConnect* >(object);
  (void)_this;
}
void ServerToClient_ReplyConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyConnect& ServerToClient_ReplyConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyConnect_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.ReplyConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_banner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_banner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_banner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ServerToClient.ReplyConnect.server_banner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.ReplyConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_banner = 2;
  if (this->server_banner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_banner().data(), static_cast<int>(this->_internal_server_banner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ServerToClient.ReplyConnect.server_banner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_banner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.ReplyConnect)
  return target;
}

size_t ServerToClient_ReplyConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.ReplyConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_banner = 2;
  if (this->server_banner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_banner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.ReplyConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.ReplyConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.ReplyConnect)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyConnect::MergeFrom(const ServerToClient_ReplyConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.ReplyConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_banner().size() > 0) {
    _internal_set_server_banner(from._internal_server_banner());
  }
}

void ServerToClient_ReplyConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.ReplyConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyConnect::CopyFrom(const ServerToClient_ReplyConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.ReplyConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyConnect::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyConnect::InternalSwap(ServerToClient_ReplyConnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_banner_.Swap(&other->server_banner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyCreateAircraft::InitAsDefaultInstance() {
}
class ServerToClient_ReplyCreateAircraft::_Internal {
 public:
};

ServerToClient_ReplyCreateAircraft::ServerToClient_ReplyCreateAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.ReplyCreateAircraft)
}
ServerToClient_ReplyCreateAircraft::ServerToClient_ReplyCreateAircraft(const ServerToClient_ReplyCreateAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  created_aircraft_id_ = from.created_aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.ReplyCreateAircraft)
}

void ServerToClient_ReplyCreateAircraft::SharedCtor() {
  created_aircraft_id_ = 0u;
}

ServerToClient_ReplyCreateAircraft::~ServerToClient_ReplyCreateAircraft() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.ReplyCreateAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyCreateAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToClient_ReplyCreateAircraft::ArenaDtor(void* object) {
  ServerToClient_ReplyCreateAircraft* _this = reinterpret_cast< ServerToClient_ReplyCreateAircraft* >(object);
  (void)_this;
}
void ServerToClient_ReplyCreateAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyCreateAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyCreateAircraft& ServerToClient_ReplyCreateAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyCreateAircraft_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyCreateAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  created_aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyCreateAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 created_aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          created_aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyCreateAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 created_aircraft_id = 1;
  if (this->created_aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_created_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.ReplyCreateAircraft)
  return target;
}

size_t ServerToClient_ReplyCreateAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 created_aircraft_id = 1;
  if (this->created_aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyCreateAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyCreateAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyCreateAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.ReplyCreateAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.ReplyCreateAircraft)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyCreateAircraft::MergeFrom(const ServerToClient_ReplyCreateAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.created_aircraft_id() != 0) {
    _internal_set_created_aircraft_id(from._internal_created_aircraft_id());
  }
}

void ServerToClient_ReplyCreateAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyCreateAircraft::CopyFrom(const ServerToClient_ReplyCreateAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.ReplyCreateAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyCreateAircraft::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyCreateAircraft::InternalSwap(ServerToClient_ReplyCreateAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(created_aircraft_id_, other->created_aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyCreateAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyQueryAirport::InitAsDefaultInstance() {
  ::atc_proto::_ServerToClient_ReplyQueryAirport_default_instance_._instance.get_mutable()->airport_ = const_cast< ::atc_proto::AirportMessage*>(
      ::atc_proto::AirportMessage::internal_default_instance());
}
class ServerToClient_ReplyQueryAirport::_Internal {
 public:
  static const ::atc_proto::AirportMessage& airport(const ServerToClient_ReplyQueryAirport* msg);
};

const ::atc_proto::AirportMessage&
ServerToClient_ReplyQueryAirport::_Internal::airport(const ServerToClient_ReplyQueryAirport* msg) {
  return *msg->airport_;
}
ServerToClient_ReplyQueryAirport::ServerToClient_ReplyQueryAirport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.ReplyQueryAirport)
}
ServerToClient_ReplyQueryAirport::ServerToClient_ReplyQueryAirport(const ServerToClient_ReplyQueryAirport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_airport()) {
    airport_ = new ::atc_proto::AirportMessage(*from.airport_);
  } else {
    airport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.ReplyQueryAirport)
}

void ServerToClient_ReplyQueryAirport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyQueryAirport_atc_2eproto.base);
  airport_ = nullptr;
}

ServerToClient_ReplyQueryAirport::~ServerToClient_ReplyQueryAirport() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.ReplyQueryAirport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyQueryAirport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete airport_;
}

void ServerToClient_ReplyQueryAirport::ArenaDtor(void* object) {
  ServerToClient_ReplyQueryAirport* _this = reinterpret_cast< ServerToClient_ReplyQueryAirport* >(object);
  (void)_this;
}
void ServerToClient_ReplyQueryAirport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyQueryAirport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyQueryAirport& ServerToClient_ReplyQueryAirport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyQueryAirport_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyQueryAirport::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.ReplyQueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && airport_ != nullptr) {
    delete airport_;
  }
  airport_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyQueryAirport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .atc_proto.AirportMessage airport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_airport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyQueryAirport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.ReplyQueryAirport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atc_proto.AirportMessage airport = 1;
  if (this->has_airport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::airport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.ReplyQueryAirport)
  return target;
}

size_t ServerToClient_ReplyQueryAirport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.ReplyQueryAirport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.AirportMessage airport = 1;
  if (this->has_airport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *airport_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyQueryAirport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.ReplyQueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyQueryAirport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyQueryAirport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.ReplyQueryAirport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.ReplyQueryAirport)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyQueryAirport::MergeFrom(const ServerToClient_ReplyQueryAirport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.ReplyQueryAirport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_airport()) {
    _internal_mutable_airport()->::atc_proto::AirportMessage::MergeFrom(from._internal_airport());
  }
}

void ServerToClient_ReplyQueryAirport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.ReplyQueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyQueryAirport::CopyFrom(const ServerToClient_ReplyQueryAirport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.ReplyQueryAirport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyQueryAirport::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyQueryAirport::InternalSwap(ServerToClient_ReplyQueryAirport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(airport_, other->airport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyQueryAirport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyQueryTaxiPath::InitAsDefaultInstance() {
  ::atc_proto::_ServerToClient_ReplyQueryTaxiPath_default_instance_._instance.get_mutable()->taxi_path_ = const_cast< ::atc_proto::TaxiPathMessage*>(
      ::atc_proto::TaxiPathMessage::internal_default_instance());
}
class ServerToClient_ReplyQueryTaxiPath::_Internal {
 public:
  static const ::atc_proto::TaxiPathMessage& taxi_path(const ServerToClient_ReplyQueryTaxiPath* msg);
};

const ::atc_proto::TaxiPathMessage&
ServerToClient_ReplyQueryTaxiPath::_Internal::taxi_path(const ServerToClient_ReplyQueryTaxiPath* msg) {
  return *msg->taxi_path_;
}
ServerToClient_ReplyQueryTaxiPath::ServerToClient_ReplyQueryTaxiPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.ReplyQueryTaxiPath)
}
ServerToClient_ReplyQueryTaxiPath::ServerToClient_ReplyQueryTaxiPath(const ServerToClient_ReplyQueryTaxiPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_taxi_path()) {
    taxi_path_ = new ::atc_proto::TaxiPathMessage(*from.taxi_path_);
  } else {
    taxi_path_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.ReplyQueryTaxiPath)
}

void ServerToClient_ReplyQueryTaxiPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto.base);
  ::memset(&taxi_path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&taxi_path_)) + sizeof(success_));
}

ServerToClient_ReplyQueryTaxiPath::~ServerToClient_ReplyQueryTaxiPath() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyQueryTaxiPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete taxi_path_;
}

void ServerToClient_ReplyQueryTaxiPath::ArenaDtor(void* object) {
  ServerToClient_ReplyQueryTaxiPath* _this = reinterpret_cast< ServerToClient_ReplyQueryTaxiPath* >(object);
  (void)_this;
}
void ServerToClient_ReplyQueryTaxiPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyQueryTaxiPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyQueryTaxiPath& ServerToClient_ReplyQueryTaxiPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyQueryTaxiPath_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyQueryTaxiPath::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && taxi_path_ != nullptr) {
    delete taxi_path_;
  }
  taxi_path_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyQueryTaxiPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.TaxiPathMessage taxi_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_taxi_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyQueryTaxiPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .atc_proto.TaxiPathMessage taxi_path = 2;
  if (this->has_taxi_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::taxi_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  return target;
}

size_t ServerToClient_ReplyQueryTaxiPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.TaxiPathMessage taxi_path = 2;
  if (this->has_taxi_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taxi_path_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyQueryTaxiPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyQueryTaxiPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyQueryTaxiPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.ReplyQueryTaxiPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.ReplyQueryTaxiPath)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyQueryTaxiPath::MergeFrom(const ServerToClient_ReplyQueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_taxi_path()) {
    _internal_mutable_taxi_path()->::atc_proto::TaxiPathMessage::MergeFrom(from._internal_taxi_path());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerToClient_ReplyQueryTaxiPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyQueryTaxiPath::CopyFrom(const ServerToClient_ReplyQueryTaxiPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.ReplyQueryTaxiPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyQueryTaxiPath::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyQueryTaxiPath::InternalSwap(ServerToClient_ReplyQueryTaxiPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyQueryTaxiPath, success_)
      + sizeof(ServerToClient_ReplyQueryTaxiPath::success_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyQueryTaxiPath, taxi_path_)>(
          reinterpret_cast<char*>(&taxi_path_),
          reinterpret_cast<char*>(&other->taxi_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyQueryTaxiPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyQueryTraffic::InitAsDefaultInstance() {
}
class ServerToClient_ReplyQueryTraffic::_Internal {
 public:
};

ServerToClient_ReplyQueryTraffic::ServerToClient_ReplyQueryTraffic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  traffic_batch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.ReplyQueryTraffic)
}
ServerToClient_ReplyQueryTraffic::ServerToClient_ReplyQueryTraffic(const ServerToClient_ReplyQueryTraffic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      traffic_batch_(from.traffic_batch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_lat_, &from.min_lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_batch_) -
    reinterpret_cast<char*>(&min_lat_)) + sizeof(is_last_batch_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.ReplyQueryTraffic)
}

void ServerToClient_ReplyQueryTraffic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto.base);
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_batch_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(is_last_batch_));
}

ServerToClient_ReplyQueryTraffic::~ServerToClient_ReplyQueryTraffic() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.ReplyQueryTraffic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyQueryTraffic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToClient_ReplyQueryTraffic::ArenaDtor(void* object) {
  ServerToClient_ReplyQueryTraffic* _this = reinterpret_cast< ServerToClient_ReplyQueryTraffic* >(object);
  (void)_this;
}
void ServerToClient_ReplyQueryTraffic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyQueryTraffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyQueryTraffic& ServerToClient_ReplyQueryTraffic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyQueryTraffic_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyQueryTraffic::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_batch_.Clear();
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_batch_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(is_last_batch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyQueryTraffic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double min_lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          min_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_lat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_lon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          max_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.AircraftMessage traffic_batch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_batch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_last_batch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_last_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyQueryTraffic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min_lat = 1;
  if (!(this->min_lat() <= 0 && this->min_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_lat(), target);
  }

  // double min_lon = 2;
  if (!(this->min_lon() <= 0 && this->min_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_lon(), target);
  }

  // double max_lat = 3;
  if (!(this->max_lat() <= 0 && this->max_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_lat(), target);
  }

  // double max_lon = 4;
  if (!(this->max_lon() <= 0 && this->max_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_lon(), target);
  }

  // repeated .atc_proto.AircraftMessage traffic_batch = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_batch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_traffic_batch(i), target, stream);
  }

  // bool is_last_batch = 6;
  if (this->is_last_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_last_batch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.ReplyQueryTraffic)
  return target;
}

size_t ServerToClient_ReplyQueryTraffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .atc_proto.AircraftMessage traffic_batch = 5;
  total_size += 1UL * this->_internal_traffic_batch_size();
  for (const auto& msg : this->traffic_batch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double min_lat = 1;
  if (!(this->min_lat() <= 0 && this->min_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_lon = 2;
  if (!(this->min_lon() <= 0 && this->min_lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_lat = 3;
  if (!(this->max_lat() <= 0 && this->max_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_lon = 4;
  if (!(this->max_lon() <= 0 && this->max_lon() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_last_batch = 6;
  if (this->is_last_batch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyQueryTraffic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyQueryTraffic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyQueryTraffic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.ReplyQueryTraffic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.ReplyQueryTraffic)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyQueryTraffic::MergeFrom(const ServerToClient_ReplyQueryTraffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_batch_.MergeFrom(from.traffic_batch_);
  if (!(from.min_lat() <= 0 && from.min_lat() >= 0)) {
    _internal_set_min_lat(from._internal_min_lat());
  }
  if (!(from.min_lon() <= 0 && from.min_lon() >= 0)) {
    _internal_set_min_lon(from._internal_min_lon());
  }
  if (!(from.max_lat() <= 0 && from.max_lat() >= 0)) {
    _internal_set_max_lat(from._internal_max_lat());
  }
  if (!(from.max_lon() <= 0 && from.max_lon() >= 0)) {
    _internal_set_max_lon(from._internal_max_lon());
  }
  if (from.is_last_batch() != 0) {
    _internal_set_is_last_batch(from._internal_is_last_batch());
  }
}

void ServerToClient_ReplyQueryTraffic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyQueryTraffic::CopyFrom(const ServerToClient_ReplyQueryTraffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.ReplyQueryTraffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyQueryTraffic::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyQueryTraffic::InternalSwap(ServerToClient_ReplyQueryTraffic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  traffic_batch_.InternalSwap(&other->traffic_batch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyQueryTraffic, is_last_batch_)
      + sizeof(ServerToClient_ReplyQueryTraffic::is_last_batch_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyQueryTraffic, min_lat_)>(
          reinterpret_cast<char*>(&min_lat_),
          reinterpret_cast<char*>(&other->min_lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyQueryTraffic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_NotifyAircraftCreated::InitAsDefaultInstance() {
  ::atc_proto::_ServerToClient_NotifyAircraftCreated_default_instance_._instance.get_mutable()->aircraft_ = const_cast< ::atc_proto::AircraftMessage*>(
      ::atc_proto::AircraftMessage::internal_default_instance());
}
class ServerToClient_NotifyAircraftCreated::_Internal {
 public:
  static const ::atc_proto::AircraftMessage& aircraft(const ServerToClient_NotifyAircraftCreated* msg);
};

const ::atc_proto::AircraftMessage&
ServerToClient_NotifyAircraftCreated::_Internal::aircraft(const ServerToClient_NotifyAircraftCreated* msg) {
  return *msg->aircraft_;
}
ServerToClient_NotifyAircraftCreated::ServerToClient_NotifyAircraftCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.NotifyAircraftCreated)
}
ServerToClient_NotifyAircraftCreated::ServerToClient_NotifyAircraftCreated(const ServerToClient_NotifyAircraftCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aircraft()) {
    aircraft_ = new ::atc_proto::AircraftMessage(*from.aircraft_);
  } else {
    aircraft_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.NotifyAircraftCreated)
}

void ServerToClient_NotifyAircraftCreated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto.base);
  aircraft_ = nullptr;
}

ServerToClient_NotifyAircraftCreated::~ServerToClient_NotifyAircraftCreated() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.NotifyAircraftCreated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_NotifyAircraftCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aircraft_;
}

void ServerToClient_NotifyAircraftCreated::ArenaDtor(void* object) {
  ServerToClient_NotifyAircraftCreated* _this = reinterpret_cast< ServerToClient_NotifyAircraftCreated* >(object);
  (void)_this;
}
void ServerToClient_NotifyAircraftCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_NotifyAircraftCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_NotifyAircraftCreated& ServerToClient_NotifyAircraftCreated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_NotifyAircraftCreated_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_NotifyAircraftCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && aircraft_ != nullptr) {
    delete aircraft_;
  }
  aircraft_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_NotifyAircraftCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .atc_proto.AircraftMessage aircraft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_NotifyAircraftCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage aircraft = 1;
  if (this->has_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aircraft(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.NotifyAircraftCreated)
  return target;
}

size_t ServerToClient_NotifyAircraftCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage aircraft = 1;
  if (this->has_aircraft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_NotifyAircraftCreated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_NotifyAircraftCreated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_NotifyAircraftCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.NotifyAircraftCreated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.NotifyAircraftCreated)
    MergeFrom(*source);
  }
}

void ServerToClient_NotifyAircraftCreated::MergeFrom(const ServerToClient_NotifyAircraftCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aircraft()) {
    _internal_mutable_aircraft()->::atc_proto::AircraftMessage::MergeFrom(from._internal_aircraft());
  }
}

void ServerToClient_NotifyAircraftCreated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_NotifyAircraftCreated::CopyFrom(const ServerToClient_NotifyAircraftCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.NotifyAircraftCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_NotifyAircraftCreated::IsInitialized() const {
  return true;
}

void ServerToClient_NotifyAircraftCreated::InternalSwap(ServerToClient_NotifyAircraftCreated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_, other->aircraft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_NotifyAircraftCreated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_NotifyAircraftSituationUpdated::InitAsDefaultInstance() {
  ::atc_proto::_ServerToClient_NotifyAircraftSituationUpdated_default_instance_._instance.get_mutable()->situation_ = const_cast< ::atc_proto::AircraftMessage_Situation*>(
      ::atc_proto::AircraftMessage_Situation::internal_default_instance());
}
class ServerToClient_NotifyAircraftSituationUpdated::_Internal {
 public:
  static const ::atc_proto::AircraftMessage_Situation& situation(const ServerToClient_NotifyAircraftSituationUpdated* msg);
};

const ::atc_proto::AircraftMessage_Situation&
ServerToClient_NotifyAircraftSituationUpdated::_Internal::situation(const ServerToClient_NotifyAircraftSituationUpdated* msg) {
  return *msg->situation_;
}
ServerToClient_NotifyAircraftSituationUpdated::ServerToClient_NotifyAircraftSituationUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
}
ServerToClient_NotifyAircraftSituationUpdated::ServerToClient_NotifyAircraftSituationUpdated(const ServerToClient_NotifyAircraftSituationUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_situation()) {
    situation_ = new ::atc_proto::AircraftMessage_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
}

void ServerToClient_NotifyAircraftSituationUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto.base);
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aircraft_id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(aircraft_id_));
}

ServerToClient_NotifyAircraftSituationUpdated::~ServerToClient_NotifyAircraftSituationUpdated() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_NotifyAircraftSituationUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete situation_;
}

void ServerToClient_NotifyAircraftSituationUpdated::ArenaDtor(void* object) {
  ServerToClient_NotifyAircraftSituationUpdated* _this = reinterpret_cast< ServerToClient_NotifyAircraftSituationUpdated* >(object);
  (void)_this;
}
void ServerToClient_NotifyAircraftSituationUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_NotifyAircraftSituationUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_NotifyAircraftSituationUpdated& ServerToClient_NotifyAircraftSituationUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_NotifyAircraftSituationUpdated_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_NotifyAircraftSituationUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_NotifyAircraftSituationUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.AircraftMessage.Situation situation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_NotifyAircraftSituationUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  // .atc_proto.AircraftMessage.Situation situation = 2;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  return target;
}

size_t ServerToClient_NotifyAircraftSituationUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.AircraftMessage.Situation situation = 2;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_NotifyAircraftSituationUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_NotifyAircraftSituationUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
    MergeFrom(*source);
  }
}

void ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(const ServerToClient_NotifyAircraftSituationUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_situation()) {
    _internal_mutable_situation()->::atc_proto::AircraftMessage_Situation::MergeFrom(from._internal_situation());
  }
  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ServerToClient_NotifyAircraftSituationUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_NotifyAircraftSituationUpdated::CopyFrom(const ServerToClient_NotifyAircraftSituationUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.NotifyAircraftSituationUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_NotifyAircraftSituationUpdated::IsInitialized() const {
  return true;
}

void ServerToClient_NotifyAircraftSituationUpdated::InternalSwap(ServerToClient_NotifyAircraftSituationUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient_NotifyAircraftSituationUpdated, aircraft_id_)
      + sizeof(ServerToClient_NotifyAircraftSituationUpdated::aircraft_id_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient_NotifyAircraftSituationUpdated, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_NotifyAircraftSituationUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_NotifyAircraftRemoved::InitAsDefaultInstance() {
}
class ServerToClient_NotifyAircraftRemoved::_Internal {
 public:
};

ServerToClient_NotifyAircraftRemoved::ServerToClient_NotifyAircraftRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.NotifyAircraftRemoved)
}
ServerToClient_NotifyAircraftRemoved::ServerToClient_NotifyAircraftRemoved(const ServerToClient_NotifyAircraftRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aircraft_id_ = from.aircraft_id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.NotifyAircraftRemoved)
}

void ServerToClient_NotifyAircraftRemoved::SharedCtor() {
  aircraft_id_ = 0u;
}

ServerToClient_NotifyAircraftRemoved::~ServerToClient_NotifyAircraftRemoved() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.NotifyAircraftRemoved)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_NotifyAircraftRemoved::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToClient_NotifyAircraftRemoved::ArenaDtor(void* object) {
  ServerToClient_NotifyAircraftRemoved* _this = reinterpret_cast< ServerToClient_NotifyAircraftRemoved* >(object);
  (void)_this;
}
void ServerToClient_NotifyAircraftRemoved::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_NotifyAircraftRemoved::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_NotifyAircraftRemoved& ServerToClient_NotifyAircraftRemoved::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_NotifyAircraftRemoved_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_NotifyAircraftRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aircraft_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_NotifyAircraftRemoved::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_NotifyAircraftRemoved::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.NotifyAircraftRemoved)
  return target;
}

size_t ServerToClient_NotifyAircraftRemoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_NotifyAircraftRemoved::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_NotifyAircraftRemoved* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_NotifyAircraftRemoved>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.NotifyAircraftRemoved)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.NotifyAircraftRemoved)
    MergeFrom(*source);
  }
}

void ServerToClient_NotifyAircraftRemoved::MergeFrom(const ServerToClient_NotifyAircraftRemoved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
}

void ServerToClient_NotifyAircraftRemoved::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_NotifyAircraftRemoved::CopyFrom(const ServerToClient_NotifyAircraftRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.NotifyAircraftRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_NotifyAircraftRemoved::IsInitialized() const {
  return true;
}

void ServerToClient_NotifyAircraftRemoved::InternalSwap(ServerToClient_NotifyAircraftRemoved* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(aircraft_id_, other->aircraft_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_NotifyAircraftRemoved::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient_ReplyUserAcquireAircraft::InitAsDefaultInstance() {
}
class ServerToClient_ReplyUserAcquireAircraft::_Internal {
 public:
};

ServerToClient_ReplyUserAcquireAircraft::ServerToClient_ReplyUserAcquireAircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
}
ServerToClient_ReplyUserAcquireAircraft::ServerToClient_ReplyUserAcquireAircraft(const ServerToClient_ReplyUserAcquireAircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aircraft_id_, &from.aircraft_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&aircraft_id_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
}

void ServerToClient_ReplyUserAcquireAircraft::SharedCtor() {
  ::memset(&aircraft_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&aircraft_id_)) + sizeof(success_));
}

ServerToClient_ReplyUserAcquireAircraft::~ServerToClient_ReplyUserAcquireAircraft() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient_ReplyUserAcquireAircraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerToClient_ReplyUserAcquireAircraft::ArenaDtor(void* object) {
  ServerToClient_ReplyUserAcquireAircraft* _this = reinterpret_cast< ServerToClient_ReplyUserAcquireAircraft* >(object);
  (void)_this;
}
void ServerToClient_ReplyUserAcquireAircraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient_ReplyUserAcquireAircraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient_ReplyUserAcquireAircraft& ServerToClient_ReplyUserAcquireAircraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_ReplyUserAcquireAircraft_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient_ReplyUserAcquireAircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&aircraft_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&aircraft_id_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient_ReplyUserAcquireAircraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 aircraft_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aircraft_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient_ReplyUserAcquireAircraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aircraft_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  return target;
}

size_t ServerToClient_ReplyUserAcquireAircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aircraft_id = 1;
  if (this->aircraft_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aircraft_id());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient_ReplyUserAcquireAircraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient_ReplyUserAcquireAircraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient_ReplyUserAcquireAircraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
    MergeFrom(*source);
  }
}

void ServerToClient_ReplyUserAcquireAircraft::MergeFrom(const ServerToClient_ReplyUserAcquireAircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aircraft_id() != 0) {
    _internal_set_aircraft_id(from._internal_aircraft_id());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerToClient_ReplyUserAcquireAircraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient_ReplyUserAcquireAircraft::CopyFrom(const ServerToClient_ReplyUserAcquireAircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient.ReplyUserAcquireAircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient_ReplyUserAcquireAircraft::IsInitialized() const {
  return true;
}

void ServerToClient_ReplyUserAcquireAircraft::InternalSwap(ServerToClient_ReplyUserAcquireAircraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyUserAcquireAircraft, success_)
      + sizeof(ServerToClient_ReplyUserAcquireAircraft::success_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient_ReplyUserAcquireAircraft, aircraft_id_)>(
          reinterpret_cast<char*>(&aircraft_id_),
          reinterpret_cast<char*>(&other->aircraft_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient_ReplyUserAcquireAircraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToClient::InitAsDefaultInstance() {
  ::atc_proto::_ServerToClient_default_instance_._instance.get_mutable()->sent_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_._instance.get_mutable()->request_sent_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_._instance.get_mutable()->request_received_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.reply_connect_ = const_cast< ::atc_proto::ServerToClient_ReplyConnect*>(
      ::atc_proto::ServerToClient_ReplyConnect::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.reply_query_airport_ = const_cast< ::atc_proto::ServerToClient_ReplyQueryAirport*>(
      ::atc_proto::ServerToClient_ReplyQueryAirport::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.reply_create_aircraft_ = const_cast< ::atc_proto::ServerToClient_ReplyCreateAircraft*>(
      ::atc_proto::ServerToClient_ReplyCreateAircraft::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.reply_query_taxi_path_ = const_cast< ::atc_proto::ServerToClient_ReplyQueryTaxiPath*>(
      ::atc_proto::ServerToClient_ReplyQueryTaxiPath::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.reply_query_traffic_ = const_cast< ::atc_proto::ServerToClient_ReplyQueryTraffic*>(
      ::atc_proto::ServerToClient_ReplyQueryTraffic::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.notify_aircraft_created_ = const_cast< ::atc_proto::ServerToClient_NotifyAircraftCreated*>(
      ::atc_proto::ServerToClient_NotifyAircraftCreated::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.notify_aircraft_situation_updated_ = const_cast< ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated*>(
      ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.notify_aircraft_removed_ = const_cast< ::atc_proto::ServerToClient_NotifyAircraftRemoved*>(
      ::atc_proto::ServerToClient_NotifyAircraftRemoved::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.reply_user_acquire_aircraft_ = const_cast< ::atc_proto::ServerToClient_ReplyUserAcquireAircraft*>(
      ::atc_proto::ServerToClient_ReplyUserAcquireAircraft::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.fault_declined_ = const_cast< ::atc_proto::ServerToClient_FaultDeclined*>(
      ::atc_proto::ServerToClient_FaultDeclined::internal_default_instance());
  ::atc_proto::_ServerToClient_default_instance_.fault_not_found_ = const_cast< ::atc_proto::ServerToClient_FaultNotFound*>(
      ::atc_proto::ServerToClient_FaultNotFound::internal_default_instance());
}
class ServerToClient::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_at(const ServerToClient* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& request_sent_at(const ServerToClient* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& request_received_at(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_ReplyConnect& reply_connect(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_ReplyQueryAirport& reply_query_airport(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_ReplyCreateAircraft& reply_create_aircraft(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_ReplyQueryTaxiPath& reply_query_taxi_path(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_ReplyQueryTraffic& reply_query_traffic(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_NotifyAircraftCreated& notify_aircraft_created(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated& notify_aircraft_situation_updated(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_NotifyAircraftRemoved& notify_aircraft_removed(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_ReplyUserAcquireAircraft& reply_user_acquire_aircraft(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_FaultDeclined& fault_declined(const ServerToClient* msg);
  static const ::atc_proto::ServerToClient_FaultNotFound& fault_not_found(const ServerToClient* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToClient::_Internal::sent_at(const ServerToClient* msg) {
  return *msg->sent_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToClient::_Internal::request_sent_at(const ServerToClient* msg) {
  return *msg->request_sent_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToClient::_Internal::request_received_at(const ServerToClient* msg) {
  return *msg->request_received_at_;
}
const ::atc_proto::ServerToClient_ReplyConnect&
ServerToClient::_Internal::reply_connect(const ServerToClient* msg) {
  return *msg->payload_.reply_connect_;
}
const ::atc_proto::ServerToClient_ReplyQueryAirport&
ServerToClient::_Internal::reply_query_airport(const ServerToClient* msg) {
  return *msg->payload_.reply_query_airport_;
}
const ::atc_proto::ServerToClient_ReplyCreateAircraft&
ServerToClient::_Internal::reply_create_aircraft(const ServerToClient* msg) {
  return *msg->payload_.reply_create_aircraft_;
}
const ::atc_proto::ServerToClient_ReplyQueryTaxiPath&
ServerToClient::_Internal::reply_query_taxi_path(const ServerToClient* msg) {
  return *msg->payload_.reply_query_taxi_path_;
}
const ::atc_proto::ServerToClient_ReplyQueryTraffic&
ServerToClient::_Internal::reply_query_traffic(const ServerToClient* msg) {
  return *msg->payload_.reply_query_traffic_;
}
const ::atc_proto::ServerToClient_NotifyAircraftCreated&
ServerToClient::_Internal::notify_aircraft_created(const ServerToClient* msg) {
  return *msg->payload_.notify_aircraft_created_;
}
const ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated&
ServerToClient::_Internal::notify_aircraft_situation_updated(const ServerToClient* msg) {
  return *msg->payload_.notify_aircraft_situation_updated_;
}
const ::atc_proto::ServerToClient_NotifyAircraftRemoved&
ServerToClient::_Internal::notify_aircraft_removed(const ServerToClient* msg) {
  return *msg->payload_.notify_aircraft_removed_;
}
const ::atc_proto::ServerToClient_ReplyUserAcquireAircraft&
ServerToClient::_Internal::reply_user_acquire_aircraft(const ServerToClient* msg) {
  return *msg->payload_.reply_user_acquire_aircraft_;
}
const ::atc_proto::ServerToClient_FaultDeclined&
ServerToClient::_Internal::fault_declined(const ServerToClient* msg) {
  return *msg->payload_.fault_declined_;
}
const ::atc_proto::ServerToClient_FaultNotFound&
ServerToClient::_Internal::fault_not_found(const ServerToClient* msg) {
  return *msg->payload_.fault_not_found_;
}
void ServerToClient::clear_sent_at() {
  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
}
void ServerToClient::clear_request_sent_at() {
  if (GetArena() == nullptr && request_sent_at_ != nullptr) {
    delete request_sent_at_;
  }
  request_sent_at_ = nullptr;
}
void ServerToClient::clear_request_received_at() {
  if (GetArena() == nullptr && request_received_at_ != nullptr) {
    delete request_received_at_;
  }
  request_received_at_ = nullptr;
}
void ServerToClient::set_allocated_reply_connect(::atc_proto::ServerToClient_ReplyConnect* reply_connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_connect);
    if (message_arena != submessage_arena) {
      reply_connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_connect, submessage_arena);
    }
    set_has_reply_connect();
    payload_.reply_connect_ = reply_connect;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.reply_connect)
}
void ServerToClient::set_allocated_reply_query_airport(::atc_proto::ServerToClient_ReplyQueryAirport* reply_query_airport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_query_airport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_query_airport);
    if (message_arena != submessage_arena) {
      reply_query_airport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_query_airport, submessage_arena);
    }
    set_has_reply_query_airport();
    payload_.reply_query_airport_ = reply_query_airport;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.reply_query_airport)
}
void ServerToClient::set_allocated_reply_create_aircraft(::atc_proto::ServerToClient_ReplyCreateAircraft* reply_create_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_create_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_create_aircraft);
    if (message_arena != submessage_arena) {
      reply_create_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_create_aircraft, submessage_arena);
    }
    set_has_reply_create_aircraft();
    payload_.reply_create_aircraft_ = reply_create_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.reply_create_aircraft)
}
void ServerToClient::set_allocated_reply_query_taxi_path(::atc_proto::ServerToClient_ReplyQueryTaxiPath* reply_query_taxi_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_query_taxi_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_query_taxi_path);
    if (message_arena != submessage_arena) {
      reply_query_taxi_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_query_taxi_path, submessage_arena);
    }
    set_has_reply_query_taxi_path();
    payload_.reply_query_taxi_path_ = reply_query_taxi_path;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.reply_query_taxi_path)
}
void ServerToClient::set_allocated_reply_query_traffic(::atc_proto::ServerToClient_ReplyQueryTraffic* reply_query_traffic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_query_traffic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_query_traffic);
    if (message_arena != submessage_arena) {
      reply_query_traffic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_query_traffic, submessage_arena);
    }
    set_has_reply_query_traffic();
    payload_.reply_query_traffic_ = reply_query_traffic;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.reply_query_traffic)
}
void ServerToClient::set_allocated_notify_aircraft_created(::atc_proto::ServerToClient_NotifyAircraftCreated* notify_aircraft_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (notify_aircraft_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notify_aircraft_created);
    if (message_arena != submessage_arena) {
      notify_aircraft_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_aircraft_created, submessage_arena);
    }
    set_has_notify_aircraft_created();
    payload_.notify_aircraft_created_ = notify_aircraft_created;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.notify_aircraft_created)
}
void ServerToClient::set_allocated_notify_aircraft_situation_updated(::atc_proto::ServerToClient_NotifyAircraftSituationUpdated* notify_aircraft_situation_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (notify_aircraft_situation_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notify_aircraft_situation_updated);
    if (message_arena != submessage_arena) {
      notify_aircraft_situation_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_aircraft_situation_updated, submessage_arena);
    }
    set_has_notify_aircraft_situation_updated();
    payload_.notify_aircraft_situation_updated_ = notify_aircraft_situation_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.notify_aircraft_situation_updated)
}
void ServerToClient::set_allocated_notify_aircraft_removed(::atc_proto::ServerToClient_NotifyAircraftRemoved* notify_aircraft_removed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (notify_aircraft_removed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notify_aircraft_removed);
    if (message_arena != submessage_arena) {
      notify_aircraft_removed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_aircraft_removed, submessage_arena);
    }
    set_has_notify_aircraft_removed();
    payload_.notify_aircraft_removed_ = notify_aircraft_removed;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.notify_aircraft_removed)
}
void ServerToClient::set_allocated_reply_user_acquire_aircraft(::atc_proto::ServerToClient_ReplyUserAcquireAircraft* reply_user_acquire_aircraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (reply_user_acquire_aircraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_user_acquire_aircraft);
    if (message_arena != submessage_arena) {
      reply_user_acquire_aircraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_user_acquire_aircraft, submessage_arena);
    }
    set_has_reply_user_acquire_aircraft();
    payload_.reply_user_acquire_aircraft_ = reply_user_acquire_aircraft;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.reply_user_acquire_aircraft)
}
void ServerToClient::set_allocated_fault_declined(::atc_proto::ServerToClient_FaultDeclined* fault_declined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (fault_declined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fault_declined);
    if (message_arena != submessage_arena) {
      fault_declined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fault_declined, submessage_arena);
    }
    set_has_fault_declined();
    payload_.fault_declined_ = fault_declined;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.fault_declined)
}
void ServerToClient::set_allocated_fault_not_found(::atc_proto::ServerToClient_FaultNotFound* fault_not_found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (fault_not_found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fault_not_found);
    if (message_arena != submessage_arena) {
      fault_not_found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fault_not_found, submessage_arena);
    }
    set_has_fault_not_found();
    payload_.fault_not_found_ = fault_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:atc_proto.ServerToClient.fault_not_found)
}
ServerToClient::ServerToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ServerToClient)
}
ServerToClient::ServerToClient(const ServerToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sent_at()) {
    sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_at_);
  } else {
    sent_at_ = nullptr;
  }
  if (from._internal_has_request_sent_at()) {
    request_sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.request_sent_at_);
  } else {
    request_sent_at_ = nullptr;
  }
  if (from._internal_has_request_received_at()) {
    request_received_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.request_received_at_);
  } else {
    request_received_at_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reply_to_request_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(reply_to_request_id_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kReplyConnect: {
      _internal_mutable_reply_connect()->::atc_proto::ServerToClient_ReplyConnect::MergeFrom(from._internal_reply_connect());
      break;
    }
    case kReplyQueryAirport: {
      _internal_mutable_reply_query_airport()->::atc_proto::ServerToClient_ReplyQueryAirport::MergeFrom(from._internal_reply_query_airport());
      break;
    }
    case kReplyCreateAircraft: {
      _internal_mutable_reply_create_aircraft()->::atc_proto::ServerToClient_ReplyCreateAircraft::MergeFrom(from._internal_reply_create_aircraft());
      break;
    }
    case kReplyQueryTaxiPath: {
      _internal_mutable_reply_query_taxi_path()->::atc_proto::ServerToClient_ReplyQueryTaxiPath::MergeFrom(from._internal_reply_query_taxi_path());
      break;
    }
    case kReplyQueryTraffic: {
      _internal_mutable_reply_query_traffic()->::atc_proto::ServerToClient_ReplyQueryTraffic::MergeFrom(from._internal_reply_query_traffic());
      break;
    }
    case kNotifyAircraftCreated: {
      _internal_mutable_notify_aircraft_created()->::atc_proto::ServerToClient_NotifyAircraftCreated::MergeFrom(from._internal_notify_aircraft_created());
      break;
    }
    case kNotifyAircraftSituationUpdated: {
      _internal_mutable_notify_aircraft_situation_updated()->::atc_proto::ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(from._internal_notify_aircraft_situation_updated());
      break;
    }
    case kNotifyAircraftRemoved: {
      _internal_mutable_notify_aircraft_removed()->::atc_proto::ServerToClient_NotifyAircraftRemoved::MergeFrom(from._internal_notify_aircraft_removed());
      break;
    }
    case kReplyUserAcquireAircraft: {
      _internal_mutable_reply_user_acquire_aircraft()->::atc_proto::ServerToClient_ReplyUserAcquireAircraft::MergeFrom(from._internal_reply_user_acquire_aircraft());
      break;
    }
    case kFaultDeclined: {
      _internal_mutable_fault_declined()->::atc_proto::ServerToClient_FaultDeclined::MergeFrom(from._internal_fault_declined());
      break;
    }
    case kFaultNotFound: {
      _internal_mutable_fault_not_found()->::atc_proto::ServerToClient_FaultNotFound::MergeFrom(from._internal_fault_not_found());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.ServerToClient)
}

void ServerToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_atc_2eproto.base);
  ::memset(&sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reply_to_request_id_) -
      reinterpret_cast<char*>(&sent_at_)) + sizeof(reply_to_request_id_));
  clear_has_payload();
}

ServerToClient::~ServerToClient() {
  // @@protoc_insertion_point(destructor:atc_proto.ServerToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sent_at_;
  if (this != internal_default_instance()) delete request_sent_at_;
  if (this != internal_default_instance()) delete request_received_at_;
  if (has_payload()) {
    clear_payload();
  }
}

void ServerToClient::ArenaDtor(void* object) {
  ServerToClient* _this = reinterpret_cast< ServerToClient* >(object);
  (void)_this;
}
void ServerToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient& ServerToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_atc_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:atc_proto.ServerToClient)
  switch (payload_case()) {
    case kReplyConnect: {
      if (GetArena() == nullptr) {
        delete payload_.reply_connect_;
      }
      break;
    }
    case kReplyQueryAirport: {
      if (GetArena() == nullptr) {
        delete payload_.reply_query_airport_;
      }
      break;
    }
    case kReplyCreateAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.reply_create_aircraft_;
      }
      break;
    }
    case kReplyQueryTaxiPath: {
      if (GetArena() == nullptr) {
        delete payload_.reply_query_taxi_path_;
      }
      break;
    }
    case kReplyQueryTraffic: {
      if (GetArena() == nullptr) {
        delete payload_.reply_query_traffic_;
      }
      break;
    }
    case kNotifyAircraftCreated: {
      if (GetArena() == nullptr) {
        delete payload_.notify_aircraft_created_;
      }
      break;
    }
    case kNotifyAircraftSituationUpdated: {
      if (GetArena() == nullptr) {
        delete payload_.notify_aircraft_situation_updated_;
      }
      break;
    }
    case kNotifyAircraftRemoved: {
      if (GetArena() == nullptr) {
        delete payload_.notify_aircraft_removed_;
      }
      break;
    }
    case kReplyUserAcquireAircraft: {
      if (GetArena() == nullptr) {
        delete payload_.reply_user_acquire_aircraft_;
      }
      break;
    }
    case kFaultDeclined: {
      if (GetArena() == nullptr) {
        delete payload_.fault_declined_;
      }
      break;
    }
    case kFaultNotFound: {
      if (GetArena() == nullptr) {
        delete payload_.fault_not_found_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ServerToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
  if (GetArena() == nullptr && request_sent_at_ != nullptr) {
    delete request_sent_at_;
  }
  request_sent_at_ = nullptr;
  if (GetArena() == nullptr && request_received_at_ != nullptr) {
    delete request_received_at_;
  }
  request_received_at_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reply_to_request_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reply_to_request_id_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reply_to_request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reply_to_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp request_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp request_received_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_received_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.NotifyAircraftCreated notify_aircraft_created = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_aircraft_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_aircraft_situation_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.NotifyAircraftRemoved notify_aircraft_removed = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_aircraft_removed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.ReplyUserAcquireAircraft reply_user_acquire_aircraft = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_user_acquire_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.ReplyConnect reply_connect = 1101;
      case 1101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.ReplyQueryAirport reply_query_airport = 1102;
      case 1102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_query_airport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.ReplyCreateAircraft reply_create_aircraft = 1103;
      case 1103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_create_aircraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.ReplyQueryTaxiPath reply_query_taxi_path = 1106;
      case 1106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_query_taxi_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.ReplyQueryTraffic reply_query_traffic = 1107;
      case 1107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_query_traffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.FaultDeclined fault_declined = 3001;
      case 3001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_fault_declined(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ServerToClient.FaultNotFound fault_not_found = 3002;
      case 3002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_fault_not_found(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // uint64 reply_to_request_id = 3;
  if (this->reply_to_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reply_to_request_id(), target);
  }

  // .google.protobuf.Timestamp sent_at = 4;
  if (this->has_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sent_at(this), target, stream);
  }

  // .google.protobuf.Timestamp request_sent_at = 5;
  if (this->has_request_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::request_sent_at(this), target, stream);
  }

  // .google.protobuf.Timestamp request_received_at = 6;
  if (this->has_request_received_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::request_received_at(this), target, stream);
  }

  // .atc_proto.ServerToClient.NotifyAircraftCreated notify_aircraft_created = 201;
  if (_internal_has_notify_aircraft_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::notify_aircraft_created(this), target, stream);
  }

  // .atc_proto.ServerToClient.NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
  if (_internal_has_notify_aircraft_situation_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        202, _Internal::notify_aircraft_situation_updated(this), target, stream);
  }

  // .atc_proto.ServerToClient.NotifyAircraftRemoved notify_aircraft_removed = 203;
  if (_internal_has_notify_aircraft_removed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        203, _Internal::notify_aircraft_removed(this), target, stream);
  }

  // .atc_proto.ServerToClient.ReplyUserAcquireAircraft reply_user_acquire_aircraft = 204;
  if (_internal_has_reply_user_acquire_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204, _Internal::reply_user_acquire_aircraft(this), target, stream);
  }

  // .atc_proto.ServerToClient.ReplyConnect reply_connect = 1101;
  if (_internal_has_reply_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1101, _Internal::reply_connect(this), target, stream);
  }

  // .atc_proto.ServerToClient.ReplyQueryAirport reply_query_airport = 1102;
  if (_internal_has_reply_query_airport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1102, _Internal::reply_query_airport(this), target, stream);
  }

  // .atc_proto.ServerToClient.ReplyCreateAircraft reply_create_aircraft = 1103;
  if (_internal_has_reply_create_aircraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1103, _Internal::reply_create_aircraft(this), target, stream);
  }

  // .atc_proto.ServerToClient.ReplyQueryTaxiPath reply_query_taxi_path = 1106;
  if (_internal_has_reply_query_taxi_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1106, _Internal::reply_query_taxi_path(this), target, stream);
  }

  // .atc_proto.ServerToClient.ReplyQueryTraffic reply_query_traffic = 1107;
  if (_internal_has_reply_query_traffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1107, _Internal::reply_query_traffic(this), target, stream);
  }

  // .atc_proto.ServerToClient.FaultDeclined fault_declined = 3001;
  if (_internal_has_fault_declined()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3001, _Internal::fault_declined(this), target, stream);
  }

  // .atc_proto.ServerToClient.FaultNotFound fault_not_found = 3002;
  if (_internal_has_fault_not_found()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3002, _Internal::fault_not_found(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ServerToClient)
  return target;
}

size_t ServerToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ServerToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sent_at = 4;
  if (this->has_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_at_);
  }

  // .google.protobuf.Timestamp request_sent_at = 5;
  if (this->has_request_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_sent_at_);
  }

  // .google.protobuf.Timestamp request_received_at = 6;
  if (this->has_request_received_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_received_at_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 reply_to_request_id = 3;
  if (this->reply_to_request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reply_to_request_id());
  }

  switch (payload_case()) {
    // .atc_proto.ServerToClient.ReplyConnect reply_connect = 1101;
    case kReplyConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_connect_);
      break;
    }
    // .atc_proto.ServerToClient.ReplyQueryAirport reply_query_airport = 1102;
    case kReplyQueryAirport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_query_airport_);
      break;
    }
    // .atc_proto.ServerToClient.ReplyCreateAircraft reply_create_aircraft = 1103;
    case kReplyCreateAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_create_aircraft_);
      break;
    }
    // .atc_proto.ServerToClient.ReplyQueryTaxiPath reply_query_taxi_path = 1106;
    case kReplyQueryTaxiPath: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_query_taxi_path_);
      break;
    }
    // .atc_proto.ServerToClient.ReplyQueryTraffic reply_query_traffic = 1107;
    case kReplyQueryTraffic: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_query_traffic_);
      break;
    }
    // .atc_proto.ServerToClient.NotifyAircraftCreated notify_aircraft_created = 201;
    case kNotifyAircraftCreated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.notify_aircraft_created_);
      break;
    }
    // .atc_proto.ServerToClient.NotifyAircraftSituationUpdated notify_aircraft_situation_updated = 202;
    case kNotifyAircraftSituationUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.notify_aircraft_situation_updated_);
      break;
    }
    // .atc_proto.ServerToClient.NotifyAircraftRemoved notify_aircraft_removed = 203;
    case kNotifyAircraftRemoved: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.notify_aircraft_removed_);
      break;
    }
    // .atc_proto.ServerToClient.ReplyUserAcquireAircraft reply_user_acquire_aircraft = 204;
    case kReplyUserAcquireAircraft: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.reply_user_acquire_aircraft_);
      break;
    }
    // .atc_proto.ServerToClient.FaultDeclined fault_declined = 3001;
    case kFaultDeclined: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.fault_declined_);
      break;
    }
    // .atc_proto.ServerToClient.FaultNotFound fault_not_found = 3002;
    case kFaultNotFound: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.fault_not_found_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ServerToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ServerToClient)
    MergeFrom(*source);
  }
}

void ServerToClient::MergeFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sent_at()) {
    _internal_mutable_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_at());
  }
  if (from.has_request_sent_at()) {
    _internal_mutable_request_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_request_sent_at());
  }
  if (from.has_request_received_at()) {
    _internal_mutable_request_received_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_request_received_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reply_to_request_id() != 0) {
    _internal_set_reply_to_request_id(from._internal_reply_to_request_id());
  }
  switch (from.payload_case()) {
    case kReplyConnect: {
      _internal_mutable_reply_connect()->::atc_proto::ServerToClient_ReplyConnect::MergeFrom(from._internal_reply_connect());
      break;
    }
    case kReplyQueryAirport: {
      _internal_mutable_reply_query_airport()->::atc_proto::ServerToClient_ReplyQueryAirport::MergeFrom(from._internal_reply_query_airport());
      break;
    }
    case kReplyCreateAircraft: {
      _internal_mutable_reply_create_aircraft()->::atc_proto::ServerToClient_ReplyCreateAircraft::MergeFrom(from._internal_reply_create_aircraft());
      break;
    }
    case kReplyQueryTaxiPath: {
      _internal_mutable_reply_query_taxi_path()->::atc_proto::ServerToClient_ReplyQueryTaxiPath::MergeFrom(from._internal_reply_query_taxi_path());
      break;
    }
    case kReplyQueryTraffic: {
      _internal_mutable_reply_query_traffic()->::atc_proto::ServerToClient_ReplyQueryTraffic::MergeFrom(from._internal_reply_query_traffic());
      break;
    }
    case kNotifyAircraftCreated: {
      _internal_mutable_notify_aircraft_created()->::atc_proto::ServerToClient_NotifyAircraftCreated::MergeFrom(from._internal_notify_aircraft_created());
      break;
    }
    case kNotifyAircraftSituationUpdated: {
      _internal_mutable_notify_aircraft_situation_updated()->::atc_proto::ServerToClient_NotifyAircraftSituationUpdated::MergeFrom(from._internal_notify_aircraft_situation_updated());
      break;
    }
    case kNotifyAircraftRemoved: {
      _internal_mutable_notify_aircraft_removed()->::atc_proto::ServerToClient_NotifyAircraftRemoved::MergeFrom(from._internal_notify_aircraft_removed());
      break;
    }
    case kReplyUserAcquireAircraft: {
      _internal_mutable_reply_user_acquire_aircraft()->::atc_proto::ServerToClient_ReplyUserAcquireAircraft::MergeFrom(from._internal_reply_user_acquire_aircraft());
      break;
    }
    case kFaultDeclined: {
      _internal_mutable_fault_declined()->::atc_proto::ServerToClient_FaultDeclined::MergeFrom(from._internal_fault_declined());
      break;
    }
    case kFaultNotFound: {
      _internal_mutable_fault_not_found()->::atc_proto::ServerToClient_FaultNotFound::MergeFrom(from._internal_fault_not_found());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void ServerToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient::IsInitialized() const {
  return true;
}

void ServerToClient::InternalSwap(ServerToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToClient, reply_to_request_id_)
      + sizeof(ServerToClient::reply_to_request_id_)
      - PROTOBUF_FIELD_OFFSET(ServerToClient, sent_at_)>(
          reinterpret_cast<char*>(&sent_at_),
          reinterpret_cast<char*>(&other->sent_at_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPoint::InitAsDefaultInstance() {
}
class GeoPoint::_Internal {
 public:
};

GeoPoint::GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.GeoPoint)
}

void GeoPoint::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:atc_proto.GeoPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoPoint::ArenaDtor(void* object) {
  GeoPoint* _this = reinterpret_cast< GeoPoint* >(object);
  (void)_this;
}
void GeoPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPoint& GeoPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPoint_atc_2eproto.base);
  return *internal_default_instance();
}


void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.GeoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.GeoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.GeoPoint)
  return target;
}

size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.GeoPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.GeoPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.GeoPoint)
    MergeFrom(*source);
  }
}

void GeoPoint::MergeFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
}

void GeoPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  return true;
}

void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPoint, lon_)
      + sizeof(GeoPoint::lon_)
      - PROTOBUF_FIELD_OFFSET(GeoPoint, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPolygon_GeoEdge::InitAsDefaultInstance() {
  ::atc_proto::_GeoPolygon_GeoEdge_default_instance_._instance.get_mutable()->from_point_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class GeoPolygon_GeoEdge::_Internal {
 public:
  static const ::atc_proto::GeoPoint& from_point(const GeoPolygon_GeoEdge* msg);
};

const ::atc_proto::GeoPoint&
GeoPolygon_GeoEdge::_Internal::from_point(const GeoPolygon_GeoEdge* msg) {
  return *msg->from_point_;
}
GeoPolygon_GeoEdge::GeoPolygon_GeoEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.GeoPolygon.GeoEdge)
}
GeoPolygon_GeoEdge::GeoPolygon_GeoEdge(const GeoPolygon_GeoEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from_point()) {
    from_point_ = new ::atc_proto::GeoPoint(*from.from_point_);
  } else {
    from_point_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.GeoPolygon.GeoEdge)
}

void GeoPolygon_GeoEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPolygon_GeoEdge_atc_2eproto.base);
  ::memset(&from_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&from_point_)) + sizeof(type_));
}

GeoPolygon_GeoEdge::~GeoPolygon_GeoEdge() {
  // @@protoc_insertion_point(destructor:atc_proto.GeoPolygon.GeoEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPolygon_GeoEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete from_point_;
}

void GeoPolygon_GeoEdge::ArenaDtor(void* object) {
  GeoPolygon_GeoEdge* _this = reinterpret_cast< GeoPolygon_GeoEdge* >(object);
  (void)_this;
}
void GeoPolygon_GeoEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPolygon_GeoEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPolygon_GeoEdge& GeoPolygon_GeoEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPolygon_GeoEdge_atc_2eproto.base);
  return *internal_default_instance();
}


void GeoPolygon_GeoEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.GeoPolygon.GeoEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && from_point_ != nullptr) {
    delete from_point_;
  }
  from_point_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPolygon_GeoEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .atc_proto.GeoEdgeType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::atc_proto::GeoEdgeType>(val));
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint from_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPolygon_GeoEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.GeoPolygon.GeoEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atc_proto.GeoEdgeType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .atc_proto.GeoPoint from_point = 2;
  if (this->has_from_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.GeoPolygon.GeoEdge)
  return target;
}

size_t GeoPolygon_GeoEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.GeoPolygon.GeoEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.GeoPoint from_point = 2;
  if (this->has_from_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_point_);
  }

  // .atc_proto.GeoEdgeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPolygon_GeoEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.GeoPolygon.GeoEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPolygon_GeoEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPolygon_GeoEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.GeoPolygon.GeoEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.GeoPolygon.GeoEdge)
    MergeFrom(*source);
  }
}

void GeoPolygon_GeoEdge::MergeFrom(const GeoPolygon_GeoEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.GeoPolygon.GeoEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from_point()) {
    _internal_mutable_from_point()->::atc_proto::GeoPoint::MergeFrom(from._internal_from_point());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GeoPolygon_GeoEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.GeoPolygon.GeoEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPolygon_GeoEdge::CopyFrom(const GeoPolygon_GeoEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.GeoPolygon.GeoEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPolygon_GeoEdge::IsInitialized() const {
  return true;
}

void GeoPolygon_GeoEdge::InternalSwap(GeoPolygon_GeoEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPolygon_GeoEdge, type_)
      + sizeof(GeoPolygon_GeoEdge::type_)
      - PROTOBUF_FIELD_OFFSET(GeoPolygon_GeoEdge, from_point_)>(
          reinterpret_cast<char*>(&from_point_),
          reinterpret_cast<char*>(&other->from_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPolygon_GeoEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPolygon::InitAsDefaultInstance() {
}
class GeoPolygon::_Internal {
 public:
};

GeoPolygon::GeoPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.GeoPolygon)
}
GeoPolygon::GeoPolygon(const GeoPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atc_proto.GeoPolygon)
}

void GeoPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPolygon_atc_2eproto.base);
}

GeoPolygon::~GeoPolygon() {
  // @@protoc_insertion_point(destructor:atc_proto.GeoPolygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoPolygon::ArenaDtor(void* object) {
  GeoPolygon* _this = reinterpret_cast< GeoPolygon* >(object);
  (void)_this;
}
void GeoPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPolygon& GeoPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPolygon_atc_2eproto.base);
  return *internal_default_instance();
}


void GeoPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .atc_proto.GeoPolygon.GeoEdge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atc_proto.GeoPolygon.GeoEdge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.GeoPolygon)
  return target;
}

size_t GeoPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.GeoPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .atc_proto.GeoPolygon.GeoEdge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.GeoPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.GeoPolygon)
    MergeFrom(*source);
  }
}

void GeoPolygon::MergeFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
}

void GeoPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPolygon::CopyFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPolygon::IsInitialized() const {
  return true;
}

void GeoPolygon::InternalSwap(GeoPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector3dMessage::InitAsDefaultInstance() {
}
class Vector3dMessage::_Internal {
 public:
};

Vector3dMessage::Vector3dMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.Vector3dMessage)
}
Vector3dMessage::Vector3dMessage(const Vector3dMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(alt_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.Vector3dMessage)
}

void Vector3dMessage::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(alt_));
}

Vector3dMessage::~Vector3dMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.Vector3dMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3dMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3dMessage::ArenaDtor(void* object) {
  Vector3dMessage* _this = reinterpret_cast< Vector3dMessage* >(object);
  (void)_this;
}
void Vector3dMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3dMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3dMessage& Vector3dMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3dMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void Vector3dMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.Vector3dMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(alt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3dMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3dMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.Vector3dMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.Vector3dMessage)
  return target;
}

size_t Vector3dMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.Vector3dMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3dMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.Vector3dMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3dMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3dMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.Vector3dMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.Vector3dMessage)
    MergeFrom(*source);
  }
}

void Vector3dMessage::MergeFrom(const Vector3dMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.Vector3dMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.alt() <= 0 && from.alt() >= 0)) {
    _internal_set_alt(from._internal_alt());
  }
}

void Vector3dMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.Vector3dMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3dMessage::CopyFrom(const Vector3dMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.Vector3dMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3dMessage::IsInitialized() const {
  return true;
}

void Vector3dMessage::InternalSwap(Vector3dMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3dMessage, alt_)
      + sizeof(Vector3dMessage::alt_)
      - PROTOBUF_FIELD_OFFSET(Vector3dMessage, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3dMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttitudeMessage::InitAsDefaultInstance() {
}
class AttitudeMessage::_Internal {
 public:
};

AttitudeMessage::AttitudeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.AttitudeMessage)
}
AttitudeMessage::AttitudeMessage(const AttitudeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.AttitudeMessage)
}

void AttitudeMessage::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(roll_));
}

AttitudeMessage::~AttitudeMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.AttitudeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttitudeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttitudeMessage::ArenaDtor(void* object) {
  AttitudeMessage* _this = reinterpret_cast< AttitudeMessage* >(object);
  (void)_this;
}
void AttitudeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttitudeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttitudeMessage& AttitudeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttitudeMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void AttitudeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.AttitudeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.AttitudeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float heading = 1;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_heading(), target);
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.AttitudeMessage)
  return target;
}

size_t AttitudeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.AttitudeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float heading = 1;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.AttitudeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.AttitudeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.AttitudeMessage)
    MergeFrom(*source);
  }
}

void AttitudeMessage::MergeFrom(const AttitudeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.AttitudeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void AttitudeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.AttitudeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeMessage::CopyFrom(const AttitudeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.AttitudeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeMessage::IsInitialized() const {
  return true;
}

void AttitudeMessage::InternalSwap(AttitudeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttitudeMessage, roll_)
      + sizeof(AttitudeMessage::roll_)
      - PROTOBUF_FIELD_OFFSET(AttitudeMessage, heading_)>(
          reinterpret_cast<char*>(&heading_),
          reinterpret_cast<char*>(&other->heading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AirportMessage::InitAsDefaultInstance() {
  ::atc_proto::_AirportMessage_default_instance_._instance.get_mutable()->location_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class AirportMessage::_Internal {
 public:
  static const ::atc_proto::GeoPoint& location(const AirportMessage* msg);
};

const ::atc_proto::GeoPoint&
AirportMessage::_Internal::location(const AirportMessage* msg) {
  return *msg->location_;
}
AirportMessage::AirportMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  runways_(arena),
  parking_stands_(arena),
  taxi_nodes_(arena),
  taxi_edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.AirportMessage)
}
AirportMessage::AirportMessage(const AirportMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      runways_(from.runways_),
      parking_stands_(from.parking_stands_),
      taxi_nodes_(from.taxi_nodes_),
      taxi_edges_(from.taxi_edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icao().empty()) {
    icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icao(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::atc_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atc_proto.AirportMessage)
}

void AirportMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AirportMessage_atc_2eproto.base);
  icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
}

AirportMessage::~AirportMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.AirportMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AirportMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void AirportMessage::ArenaDtor(void* object) {
  AirportMessage* _this = reinterpret_cast< AirportMessage* >(object);
  (void)_this;
}
void AirportMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AirportMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirportMessage& AirportMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AirportMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void AirportMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.AirportMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runways_.Clear();
  parking_stands_.Clear();
  taxi_nodes_.Clear();
  taxi_edges_.Clear();
  icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AirportMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string icao = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.AirportMessage.icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.RunwayMessage runways = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_runways(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.ParkingStandMessage parking_stands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parking_stands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.TaxiNodeMessage taxi_nodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taxi_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.TaxiEdgeMessage taxi_edges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taxi_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AirportMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.AirportMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string icao = 1;
  if (this->icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao().data(), static_cast<int>(this->_internal_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.AirportMessage.icao");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_icao(), target);
  }

  // .atc_proto.GeoPoint location = 2;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // repeated .atc_proto.RunwayMessage runways = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_runways_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_runways(i), target, stream);
  }

  // repeated .atc_proto.ParkingStandMessage parking_stands = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parking_stands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_parking_stands(i), target, stream);
  }

  // repeated .atc_proto.TaxiNodeMessage taxi_nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taxi_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_taxi_nodes(i), target, stream);
  }

  // repeated .atc_proto.TaxiEdgeMessage taxi_edges = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taxi_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_taxi_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.AirportMessage)
  return target;
}

size_t AirportMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.AirportMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .atc_proto.RunwayMessage runways = 3;
  total_size += 1UL * this->_internal_runways_size();
  for (const auto& msg : this->runways_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .atc_proto.ParkingStandMessage parking_stands = 4;
  total_size += 1UL * this->_internal_parking_stands_size();
  for (const auto& msg : this->parking_stands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .atc_proto.TaxiNodeMessage taxi_nodes = 5;
  total_size += 1UL * this->_internal_taxi_nodes_size();
  for (const auto& msg : this->taxi_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .atc_proto.TaxiEdgeMessage taxi_edges = 6;
  total_size += 1UL * this->_internal_taxi_edges_size();
  for (const auto& msg : this->taxi_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string icao = 1;
  if (this->icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao());
  }

  // .atc_proto.GeoPoint location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirportMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.AirportMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AirportMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AirportMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.AirportMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.AirportMessage)
    MergeFrom(*source);
  }
}

void AirportMessage::MergeFrom(const AirportMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.AirportMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  runways_.MergeFrom(from.runways_);
  parking_stands_.MergeFrom(from.parking_stands_);
  taxi_nodes_.MergeFrom(from.taxi_nodes_);
  taxi_edges_.MergeFrom(from.taxi_edges_);
  if (from.icao().size() > 0) {
    _internal_set_icao(from._internal_icao());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::atc_proto::GeoPoint::MergeFrom(from._internal_location());
  }
}

void AirportMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.AirportMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirportMessage::CopyFrom(const AirportMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.AirportMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirportMessage::IsInitialized() const {
  return true;
}

void AirportMessage::InternalSwap(AirportMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  runways_.InternalSwap(&other->runways_);
  parking_stands_.InternalSwap(&other->parking_stands_);
  taxi_nodes_.InternalSwap(&other->taxi_nodes_);
  taxi_edges_.InternalSwap(&other->taxi_edges_);
  icao_.Swap(&other->icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AirportMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunwayMessage_End::InitAsDefaultInstance() {
  ::atc_proto::_RunwayMessage_End_default_instance_._instance.get_mutable()->centerline_point_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class RunwayMessage_End::_Internal {
 public:
  static const ::atc_proto::GeoPoint& centerline_point(const RunwayMessage_End* msg);
};

const ::atc_proto::GeoPoint&
RunwayMessage_End::_Internal::centerline_point(const RunwayMessage_End* msg) {
  return *msg->centerline_point_;
}
RunwayMessage_End::RunwayMessage_End(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.RunwayMessage.End)
}
RunwayMessage_End::RunwayMessage_End(const RunwayMessage_End& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_centerline_point()) {
    centerline_point_ = new ::atc_proto::GeoPoint(*from.centerline_point_);
  } else {
    centerline_point_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&overrun_area_meters_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(overrun_area_meters_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.RunwayMessage.End)
}

void RunwayMessage_End::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunwayMessage_End_atc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&centerline_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overrun_area_meters_) -
      reinterpret_cast<char*>(&centerline_point_)) + sizeof(overrun_area_meters_));
}

RunwayMessage_End::~RunwayMessage_End() {
  // @@protoc_insertion_point(destructor:atc_proto.RunwayMessage.End)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunwayMessage_End::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete centerline_point_;
}

void RunwayMessage_End::ArenaDtor(void* object) {
  RunwayMessage_End* _this = reinterpret_cast< RunwayMessage_End* >(object);
  (void)_this;
}
void RunwayMessage_End::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunwayMessage_End::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunwayMessage_End& RunwayMessage_End::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunwayMessage_End_atc_2eproto.base);
  return *internal_default_instance();
}


void RunwayMessage_End::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.RunwayMessage.End)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && centerline_point_ != nullptr) {
    delete centerline_point_;
  }
  centerline_point_ = nullptr;
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overrun_area_meters_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(overrun_area_meters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunwayMessage_End::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.RunwayMessage.End.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint centerline_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_centerline_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float displaced_threshold_meters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          displaced_threshold_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float overrun_area_meters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          overrun_area_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunwayMessage_End::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.RunwayMessage.End)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.RunwayMessage.End.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_heading(), target);
  }

  // .atc_proto.GeoPoint centerline_point = 3;
  if (this->has_centerline_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::centerline_point(this), target, stream);
  }

  // float displaced_threshold_meters = 4;
  if (!(this->displaced_threshold_meters() <= 0 && this->displaced_threshold_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_displaced_threshold_meters(), target);
  }

  // float overrun_area_meters = 5;
  if (!(this->overrun_area_meters() <= 0 && this->overrun_area_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_overrun_area_meters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.RunwayMessage.End)
  return target;
}

size_t RunwayMessage_End::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.RunwayMessage.End)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .atc_proto.GeoPoint centerline_point = 3;
  if (this->has_centerline_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centerline_point_);
  }

  // float heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float displaced_threshold_meters = 4;
  if (!(this->displaced_threshold_meters() <= 0 && this->displaced_threshold_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float overrun_area_meters = 5;
  if (!(this->overrun_area_meters() <= 0 && this->overrun_area_meters() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunwayMessage_End::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.RunwayMessage.End)
  GOOGLE_DCHECK_NE(&from, this);
  const RunwayMessage_End* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunwayMessage_End>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.RunwayMessage.End)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.RunwayMessage.End)
    MergeFrom(*source);
  }
}

void RunwayMessage_End::MergeFrom(const RunwayMessage_End& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.RunwayMessage.End)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_centerline_point()) {
    _internal_mutable_centerline_point()->::atc_proto::GeoPoint::MergeFrom(from._internal_centerline_point());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.displaced_threshold_meters() <= 0 && from.displaced_threshold_meters() >= 0)) {
    _internal_set_displaced_threshold_meters(from._internal_displaced_threshold_meters());
  }
  if (!(from.overrun_area_meters() <= 0 && from.overrun_area_meters() >= 0)) {
    _internal_set_overrun_area_meters(from._internal_overrun_area_meters());
  }
}

void RunwayMessage_End::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.RunwayMessage.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunwayMessage_End::CopyFrom(const RunwayMessage_End& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.RunwayMessage.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunwayMessage_End::IsInitialized() const {
  return true;
}

void RunwayMessage_End::InternalSwap(RunwayMessage_End* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunwayMessage_End, overrun_area_meters_)
      + sizeof(RunwayMessage_End::overrun_area_meters_)
      - PROTOBUF_FIELD_OFFSET(RunwayMessage_End, centerline_point_)>(
          reinterpret_cast<char*>(&centerline_point_),
          reinterpret_cast<char*>(&other->centerline_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunwayMessage_End::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunwayMessage::InitAsDefaultInstance() {
  ::atc_proto::_RunwayMessage_default_instance_._instance.get_mutable()->end_1_ = const_cast< ::atc_proto::RunwayMessage_End*>(
      ::atc_proto::RunwayMessage_End::internal_default_instance());
  ::atc_proto::_RunwayMessage_default_instance_._instance.get_mutable()->end_2_ = const_cast< ::atc_proto::RunwayMessage_End*>(
      ::atc_proto::RunwayMessage_End::internal_default_instance());
}
class RunwayMessage::_Internal {
 public:
  static const ::atc_proto::RunwayMessage_End& end_1(const RunwayMessage* msg);
  static const ::atc_proto::RunwayMessage_End& end_2(const RunwayMessage* msg);
};

const ::atc_proto::RunwayMessage_End&
RunwayMessage::_Internal::end_1(const RunwayMessage* msg) {
  return *msg->end_1_;
}
const ::atc_proto::RunwayMessage_End&
RunwayMessage::_Internal::end_2(const RunwayMessage* msg) {
  return *msg->end_2_;
}
RunwayMessage::RunwayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.RunwayMessage)
}
RunwayMessage::RunwayMessage(const RunwayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_1()) {
    end_1_ = new ::atc_proto::RunwayMessage_End(*from.end_1_);
  } else {
    end_1_ = nullptr;
  }
  if (from._internal_has_end_2()) {
    end_2_ = new ::atc_proto::RunwayMessage_End(*from.end_2_);
  } else {
    end_2_ = nullptr;
  }
  ::memcpy(&width_meters_, &from.width_meters_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_bit_) -
    reinterpret_cast<char*>(&width_meters_)) + sizeof(mask_bit_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.RunwayMessage)
}

void RunwayMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunwayMessage_atc_2eproto.base);
  ::memset(&end_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_bit_) -
      reinterpret_cast<char*>(&end_1_)) + sizeof(mask_bit_));
}

RunwayMessage::~RunwayMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.RunwayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunwayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_1_;
  if (this != internal_default_instance()) delete end_2_;
}

void RunwayMessage::ArenaDtor(void* object) {
  RunwayMessage* _this = reinterpret_cast< RunwayMessage* >(object);
  (void)_this;
}
void RunwayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunwayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunwayMessage& RunwayMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunwayMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void RunwayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.RunwayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && end_1_ != nullptr) {
    delete end_1_;
  }
  end_1_ = nullptr;
  if (GetArena() == nullptr && end_2_ != nullptr) {
    delete end_2_;
  }
  end_2_ = nullptr;
  ::memset(&width_meters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_bit_) -
      reinterpret_cast<char*>(&width_meters_)) + sizeof(mask_bit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunwayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float width_meters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          width_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length_meters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          length_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 mask_bit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mask_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.RunwayMessage.End end_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.RunwayMessage.End end_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunwayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.RunwayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width_meters = 1;
  if (!(this->width_meters() <= 0 && this->width_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width_meters(), target);
  }

  // float length_meters = 2;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_length_meters(), target);
  }

  // uint32 mask_bit = 3;
  if (this->mask_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mask_bit(), target);
  }

  // .atc_proto.RunwayMessage.End end_1 = 4;
  if (this->has_end_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_1(this), target, stream);
  }

  // .atc_proto.RunwayMessage.End end_2 = 5;
  if (this->has_end_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::end_2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.RunwayMessage)
  return target;
}

size_t RunwayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.RunwayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.RunwayMessage.End end_1 = 4;
  if (this->has_end_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_1_);
  }

  // .atc_proto.RunwayMessage.End end_2 = 5;
  if (this->has_end_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_2_);
  }

  // float width_meters = 1;
  if (!(this->width_meters() <= 0 && this->width_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float length_meters = 2;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 mask_bit = 3;
  if (this->mask_bit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_bit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunwayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.RunwayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RunwayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunwayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.RunwayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.RunwayMessage)
    MergeFrom(*source);
  }
}

void RunwayMessage::MergeFrom(const RunwayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.RunwayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_1()) {
    _internal_mutable_end_1()->::atc_proto::RunwayMessage_End::MergeFrom(from._internal_end_1());
  }
  if (from.has_end_2()) {
    _internal_mutable_end_2()->::atc_proto::RunwayMessage_End::MergeFrom(from._internal_end_2());
  }
  if (!(from.width_meters() <= 0 && from.width_meters() >= 0)) {
    _internal_set_width_meters(from._internal_width_meters());
  }
  if (!(from.length_meters() <= 0 && from.length_meters() >= 0)) {
    _internal_set_length_meters(from._internal_length_meters());
  }
  if (from.mask_bit() != 0) {
    _internal_set_mask_bit(from._internal_mask_bit());
  }
}

void RunwayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.RunwayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunwayMessage::CopyFrom(const RunwayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.RunwayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunwayMessage::IsInitialized() const {
  return true;
}

void RunwayMessage::InternalSwap(RunwayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunwayMessage, mask_bit_)
      + sizeof(RunwayMessage::mask_bit_)
      - PROTOBUF_FIELD_OFFSET(RunwayMessage, end_1_)>(
          reinterpret_cast<char*>(&end_1_),
          reinterpret_cast<char*>(&other->end_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunwayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiNodeMessage::InitAsDefaultInstance() {
  ::atc_proto::_TaxiNodeMessage_default_instance_._instance.get_mutable()->location_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class TaxiNodeMessage::_Internal {
 public:
  static const ::atc_proto::GeoPoint& location(const TaxiNodeMessage* msg);
};

const ::atc_proto::GeoPoint&
TaxiNodeMessage::_Internal::location(const TaxiNodeMessage* msg) {
  return *msg->location_;
}
TaxiNodeMessage::TaxiNodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.TaxiNodeMessage)
}
TaxiNodeMessage::TaxiNodeMessage(const TaxiNodeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::atc_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_junction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_junction_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.TaxiNodeMessage)
}

void TaxiNodeMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaxiNodeMessage_atc_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_junction_) -
      reinterpret_cast<char*>(&location_)) + sizeof(is_junction_));
}

TaxiNodeMessage::~TaxiNodeMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.TaxiNodeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiNodeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void TaxiNodeMessage::ArenaDtor(void* object) {
  TaxiNodeMessage* _this = reinterpret_cast< TaxiNodeMessage* >(object);
  (void)_this;
}
void TaxiNodeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiNodeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiNodeMessage& TaxiNodeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiNodeMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void TaxiNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.TaxiNodeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_junction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_junction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiNodeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_junction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiNodeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.TaxiNodeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .atc_proto.GeoPoint location = 2;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // bool is_junction = 3;
  if (this->is_junction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_junction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.TaxiNodeMessage)
  return target;
}

size_t TaxiNodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.TaxiNodeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.GeoPoint location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool is_junction = 3;
  if (this->is_junction() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiNodeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.TaxiNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiNodeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiNodeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.TaxiNodeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.TaxiNodeMessage)
    MergeFrom(*source);
  }
}

void TaxiNodeMessage::MergeFrom(const TaxiNodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.TaxiNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::atc_proto::GeoPoint::MergeFrom(from._internal_location());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_junction() != 0) {
    _internal_set_is_junction(from._internal_is_junction());
  }
}

void TaxiNodeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.TaxiNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiNodeMessage::CopyFrom(const TaxiNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.TaxiNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiNodeMessage::IsInitialized() const {
  return true;
}

void TaxiNodeMessage::InternalSwap(TaxiNodeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiNodeMessage, is_junction_)
      + sizeof(TaxiNodeMessage::is_junction_)
      - PROTOBUF_FIELD_OFFSET(TaxiNodeMessage, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiNodeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiEdgeMessage_ActiveZoneMatrix::InitAsDefaultInstance() {
}
class TaxiEdgeMessage_ActiveZoneMatrix::_Internal {
 public:
};

TaxiEdgeMessage_ActiveZoneMatrix::TaxiEdgeMessage_ActiveZoneMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
}
TaxiEdgeMessage_ActiveZoneMatrix::TaxiEdgeMessage_ActiveZoneMatrix(const TaxiEdgeMessage_ActiveZoneMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&departure_, &from.departure_,
    static_cast<size_t>(reinterpret_cast<char*>(&ils_) -
    reinterpret_cast<char*>(&departure_)) + sizeof(ils_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
}

void TaxiEdgeMessage_ActiveZoneMatrix::SharedCtor() {
  ::memset(&departure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ils_) -
      reinterpret_cast<char*>(&departure_)) + sizeof(ils_));
}

TaxiEdgeMessage_ActiveZoneMatrix::~TaxiEdgeMessage_ActiveZoneMatrix() {
  // @@protoc_insertion_point(destructor:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiEdgeMessage_ActiveZoneMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaxiEdgeMessage_ActiveZoneMatrix::ArenaDtor(void* object) {
  TaxiEdgeMessage_ActiveZoneMatrix* _this = reinterpret_cast< TaxiEdgeMessage_ActiveZoneMatrix* >(object);
  (void)_this;
}
void TaxiEdgeMessage_ActiveZoneMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiEdgeMessage_ActiveZoneMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiEdgeMessage_ActiveZoneMatrix& TaxiEdgeMessage_ActiveZoneMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiEdgeMessage_ActiveZoneMatrix_atc_2eproto.base);
  return *internal_default_instance();
}


void TaxiEdgeMessage_ActiveZoneMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&departure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ils_) -
      reinterpret_cast<char*>(&departure_)) + sizeof(ils_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiEdgeMessage_ActiveZoneMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 departure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          departure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 arrival = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arrival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ils = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ils_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiEdgeMessage_ActiveZoneMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 departure = 1;
  if (this->departure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_departure(), target);
  }

  // uint64 arrival = 2;
  if (this->arrival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_arrival(), target);
  }

  // uint64 ils = 3;
  if (this->ils() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ils(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  return target;
}

size_t TaxiEdgeMessage_ActiveZoneMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 departure = 1;
  if (this->departure() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_departure());
  }

  // uint64 arrival = 2;
  if (this->arrival() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_arrival());
  }

  // uint64 ils = 3;
  if (this->ils() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ils());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiEdgeMessage_ActiveZoneMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiEdgeMessage_ActiveZoneMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiEdgeMessage_ActiveZoneMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
    MergeFrom(*source);
  }
}

void TaxiEdgeMessage_ActiveZoneMatrix::MergeFrom(const TaxiEdgeMessage_ActiveZoneMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.departure() != 0) {
    _internal_set_departure(from._internal_departure());
  }
  if (from.arrival() != 0) {
    _internal_set_arrival(from._internal_arrival());
  }
  if (from.ils() != 0) {
    _internal_set_ils(from._internal_ils());
  }
}

void TaxiEdgeMessage_ActiveZoneMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiEdgeMessage_ActiveZoneMatrix::CopyFrom(const TaxiEdgeMessage_ActiveZoneMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.TaxiEdgeMessage.ActiveZoneMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiEdgeMessage_ActiveZoneMatrix::IsInitialized() const {
  return true;
}

void TaxiEdgeMessage_ActiveZoneMatrix::InternalSwap(TaxiEdgeMessage_ActiveZoneMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiEdgeMessage_ActiveZoneMatrix, ils_)
      + sizeof(TaxiEdgeMessage_ActiveZoneMatrix::ils_)
      - PROTOBUF_FIELD_OFFSET(TaxiEdgeMessage_ActiveZoneMatrix, departure_)>(
          reinterpret_cast<char*>(&departure_),
          reinterpret_cast<char*>(&other->departure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiEdgeMessage_ActiveZoneMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiEdgeMessage::InitAsDefaultInstance() {
  ::atc_proto::_TaxiEdgeMessage_default_instance_._instance.get_mutable()->active_zones_ = const_cast< ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix*>(
      ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix::internal_default_instance());
}
class TaxiEdgeMessage::_Internal {
 public:
  static const ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix& active_zones(const TaxiEdgeMessage* msg);
};

const ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix&
TaxiEdgeMessage::_Internal::active_zones(const TaxiEdgeMessage* msg) {
  return *msg->active_zones_;
}
TaxiEdgeMessage::TaxiEdgeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.TaxiEdgeMessage)
}
TaxiEdgeMessage::TaxiEdgeMessage(const TaxiEdgeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_active_zones()) {
    active_zones_ = new ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix(*from.active_zones_);
  } else {
    active_zones_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.TaxiEdgeMessage)
}

void TaxiEdgeMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaxiEdgeMessage_atc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_zones_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&active_zones_)) + sizeof(heading_));
}

TaxiEdgeMessage::~TaxiEdgeMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.TaxiEdgeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiEdgeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete active_zones_;
}

void TaxiEdgeMessage::ArenaDtor(void* object) {
  TaxiEdgeMessage* _this = reinterpret_cast< TaxiEdgeMessage* >(object);
  (void)_this;
}
void TaxiEdgeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiEdgeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiEdgeMessage& TaxiEdgeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiEdgeMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void TaxiEdgeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.TaxiEdgeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && active_zones_ != nullptr) {
    delete active_zones_;
  }
  active_zones_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiEdgeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.TaxiEdgeMessage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          node_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          node_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.TaxiEdgeType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::atc_proto::TaxiEdgeType>(val));
        } else goto handle_unusual;
        continue;
      // bool is_one_way = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_one_way_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_high_speed_exit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_high_speed_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length_meters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          length_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .atc_proto.TaxiEdgeMessage.ActiveZoneMatrix active_zones = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_zones(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiEdgeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.TaxiEdgeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.TaxiEdgeMessage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 node_id_1 = 3;
  if (this->node_id_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_node_id_1(), target);
  }

  // int32 node_id_2 = 4;
  if (this->node_id_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_node_id_2(), target);
  }

  // .atc_proto.TaxiEdgeType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // bool is_one_way = 6;
  if (this->is_one_way() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_one_way(), target);
  }

  // bool is_high_speed_exit = 7;
  if (this->is_high_speed_exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_high_speed_exit(), target);
  }

  // float length_meters = 8;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_length_meters(), target);
  }

  // float heading = 9;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_heading(), target);
  }

  // .atc_proto.TaxiEdgeMessage.ActiveZoneMatrix active_zones = 10;
  if (this->has_active_zones()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::active_zones(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.TaxiEdgeMessage)
  return target;
}

size_t TaxiEdgeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.TaxiEdgeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .atc_proto.TaxiEdgeMessage.ActiveZoneMatrix active_zones = 10;
  if (this->has_active_zones()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_zones_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 node_id_1 = 3;
  if (this->node_id_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id_1());
  }

  // int32 node_id_2 = 4;
  if (this->node_id_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id_2());
  }

  // .atc_proto.TaxiEdgeType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_one_way = 6;
  if (this->is_one_way() != 0) {
    total_size += 1 + 1;
  }

  // bool is_high_speed_exit = 7;
  if (this->is_high_speed_exit() != 0) {
    total_size += 1 + 1;
  }

  // float length_meters = 8;
  if (!(this->length_meters() <= 0 && this->length_meters() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 9;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiEdgeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.TaxiEdgeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiEdgeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiEdgeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.TaxiEdgeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.TaxiEdgeMessage)
    MergeFrom(*source);
  }
}

void TaxiEdgeMessage::MergeFrom(const TaxiEdgeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.TaxiEdgeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_active_zones()) {
    _internal_mutable_active_zones()->::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix::MergeFrom(from._internal_active_zones());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.node_id_1() != 0) {
    _internal_set_node_id_1(from._internal_node_id_1());
  }
  if (from.node_id_2() != 0) {
    _internal_set_node_id_2(from._internal_node_id_2());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_one_way() != 0) {
    _internal_set_is_one_way(from._internal_is_one_way());
  }
  if (from.is_high_speed_exit() != 0) {
    _internal_set_is_high_speed_exit(from._internal_is_high_speed_exit());
  }
  if (!(from.length_meters() <= 0 && from.length_meters() >= 0)) {
    _internal_set_length_meters(from._internal_length_meters());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void TaxiEdgeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.TaxiEdgeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiEdgeMessage::CopyFrom(const TaxiEdgeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.TaxiEdgeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiEdgeMessage::IsInitialized() const {
  return true;
}

void TaxiEdgeMessage::InternalSwap(TaxiEdgeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiEdgeMessage, heading_)
      + sizeof(TaxiEdgeMessage::heading_)
      - PROTOBUF_FIELD_OFFSET(TaxiEdgeMessage, active_zones_)>(
          reinterpret_cast<char*>(&active_zones_),
          reinterpret_cast<char*>(&other->active_zones_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiEdgeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingStandMessage::InitAsDefaultInstance() {
  ::atc_proto::_ParkingStandMessage_default_instance_._instance.get_mutable()->location_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class ParkingStandMessage::_Internal {
 public:
  static const ::atc_proto::GeoPoint& location(const ParkingStandMessage* msg);
};

const ::atc_proto::GeoPoint&
ParkingStandMessage::_Internal::location(const ParkingStandMessage* msg) {
  return *msg->location_;
}
ParkingStandMessage::ParkingStandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  categories_(arena),
  operation_types_(arena),
  airline_icaos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.ParkingStandMessage)
}
ParkingStandMessage::ParkingStandMessage(const ParkingStandMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      categories_(from.categories_),
      operation_types_(from.operation_types_),
      airline_icaos_(from.airline_icaos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  width_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_width_code().empty()) {
    width_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_width_code(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::atc_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.ParkingStandMessage)
}

void ParkingStandMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingStandMessage_atc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&location_)) + sizeof(heading_));
}

ParkingStandMessage::~ParkingStandMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.ParkingStandMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingStandMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void ParkingStandMessage::ArenaDtor(void* object) {
  ParkingStandMessage* _this = reinterpret_cast< ParkingStandMessage* >(object);
  (void)_this;
}
void ParkingStandMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingStandMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingStandMessage& ParkingStandMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingStandMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void ParkingStandMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.ParkingStandMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  operation_types_.Clear();
  airline_icaos_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  width_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingStandMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ParkingStandMessage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.ParkingStandType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::atc_proto::ParkingStandType>(val));
        } else goto handle_unusual;
        continue;
      // .atc_proto.GeoPoint location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string width_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_width_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ParkingStandMessage.width_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.AircraftCategory categories = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_categories(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_categories(static_cast<::atc_proto::AircraftCategory>(val));
        } else goto handle_unusual;
        continue;
      // repeated .atc_proto.OperationType operation_types = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operation_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operation_types(static_cast<::atc_proto::OperationType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string airline_icaos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_airline_icaos();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.ParkingStandMessage.airline_icaos"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingStandMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.ParkingStandMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ParkingStandMessage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .atc_proto.ParkingStandType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .atc_proto.GeoPoint location = 4;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // float heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heading(), target);
  }

  // string width_code = 6;
  if (this->width_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_width_code().data(), static_cast<int>(this->_internal_width_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ParkingStandMessage.width_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_width_code(), target);
  }

  // repeated .atc_proto.AircraftCategory categories = 7;
  {
    int byte_size = _categories_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, categories_, byte_size, target);
    }
  }

  // repeated .atc_proto.OperationType operation_types = 8;
  {
    int byte_size = _operation_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, operation_types_, byte_size, target);
    }
  }

  // repeated string airline_icaos = 9;
  for (int i = 0, n = this->_internal_airline_icaos_size(); i < n; i++) {
    const auto& s = this->_internal_airline_icaos(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.ParkingStandMessage.airline_icaos");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.ParkingStandMessage)
  return target;
}

size_t ParkingStandMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.ParkingStandMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .atc_proto.AircraftCategory categories = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_categories_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_categories(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _categories_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .atc_proto.OperationType operation_types = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operation_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_operation_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operation_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string airline_icaos = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(airline_icaos_.size());
  for (int i = 0, n = airline_icaos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      airline_icaos_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string width_code = 6;
  if (this->width_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_width_code());
  }

  // .atc_proto.GeoPoint location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .atc_proto.ParkingStandType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingStandMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.ParkingStandMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingStandMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingStandMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.ParkingStandMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.ParkingStandMessage)
    MergeFrom(*source);
  }
}

void ParkingStandMessage::MergeFrom(const ParkingStandMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.ParkingStandMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  operation_types_.MergeFrom(from.operation_types_);
  airline_icaos_.MergeFrom(from.airline_icaos_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.width_code().size() > 0) {
    _internal_set_width_code(from._internal_width_code());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::atc_proto::GeoPoint::MergeFrom(from._internal_location());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void ParkingStandMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.ParkingStandMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingStandMessage::CopyFrom(const ParkingStandMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.ParkingStandMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingStandMessage::IsInitialized() const {
  return true;
}

void ParkingStandMessage::InternalSwap(ParkingStandMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  categories_.InternalSwap(&other->categories_);
  operation_types_.InternalSwap(&other->operation_types_);
  airline_icaos_.InternalSwap(&other->airline_icaos_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  width_code_.Swap(&other->width_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingStandMessage, heading_)
      + sizeof(ParkingStandMessage::heading_)
      - PROTOBUF_FIELD_OFFSET(ParkingStandMessage, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingStandMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AirspaceGeometryMessage::InitAsDefaultInstance() {
  ::atc_proto::_AirspaceGeometryMessage_default_instance_._instance.get_mutable()->lateral_bounds_ = const_cast< ::atc_proto::GeoPolygon*>(
      ::atc_proto::GeoPolygon::internal_default_instance());
}
class AirspaceGeometryMessage::_Internal {
 public:
  static const ::atc_proto::GeoPolygon& lateral_bounds(const AirspaceGeometryMessage* msg);
};

const ::atc_proto::GeoPolygon&
AirspaceGeometryMessage::_Internal::lateral_bounds(const AirspaceGeometryMessage* msg) {
  return *msg->lateral_bounds_;
}
AirspaceGeometryMessage::AirspaceGeometryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.AirspaceGeometryMessage)
}
AirspaceGeometryMessage::AirspaceGeometryMessage(const AirspaceGeometryMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lateral_bounds()) {
    lateral_bounds_ = new ::atc_proto::GeoPolygon(*from.lateral_bounds_);
  } else {
    lateral_bounds_ = nullptr;
  }
  ::memcpy(&lower_bound_feet_, &from.lower_bound_feet_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_bound_feet_) -
    reinterpret_cast<char*>(&lower_bound_feet_)) + sizeof(upper_bound_feet_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.AirspaceGeometryMessage)
}

void AirspaceGeometryMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AirspaceGeometryMessage_atc_2eproto.base);
  ::memset(&lateral_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_bound_feet_) -
      reinterpret_cast<char*>(&lateral_bounds_)) + sizeof(upper_bound_feet_));
}

AirspaceGeometryMessage::~AirspaceGeometryMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.AirspaceGeometryMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AirspaceGeometryMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lateral_bounds_;
}

void AirspaceGeometryMessage::ArenaDtor(void* object) {
  AirspaceGeometryMessage* _this = reinterpret_cast< AirspaceGeometryMessage* >(object);
  (void)_this;
}
void AirspaceGeometryMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AirspaceGeometryMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirspaceGeometryMessage& AirspaceGeometryMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AirspaceGeometryMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void AirspaceGeometryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.AirspaceGeometryMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lateral_bounds_ != nullptr) {
    delete lateral_bounds_;
  }
  lateral_bounds_ = nullptr;
  ::memset(&lower_bound_feet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_bound_feet_) -
      reinterpret_cast<char*>(&lower_bound_feet_)) + sizeof(upper_bound_feet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AirspaceGeometryMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .atc_proto.GeoPolygon lateral_bounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lateral_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lower_bound_feet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lower_bound_feet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float upper_bound_feet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          upper_bound_feet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AirspaceGeometryMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.AirspaceGeometryMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atc_proto.GeoPolygon lateral_bounds = 1;
  if (this->has_lateral_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lateral_bounds(this), target, stream);
  }

  // float lower_bound_feet = 2;
  if (!(this->lower_bound_feet() <= 0 && this->lower_bound_feet() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lower_bound_feet(), target);
  }

  // float upper_bound_feet = 3;
  if (!(this->upper_bound_feet() <= 0 && this->upper_bound_feet() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_upper_bound_feet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.AirspaceGeometryMessage)
  return target;
}

size_t AirspaceGeometryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.AirspaceGeometryMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atc_proto.GeoPolygon lateral_bounds = 1;
  if (this->has_lateral_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lateral_bounds_);
  }

  // float lower_bound_feet = 2;
  if (!(this->lower_bound_feet() <= 0 && this->lower_bound_feet() >= 0)) {
    total_size += 1 + 4;
  }

  // float upper_bound_feet = 3;
  if (!(this->upper_bound_feet() <= 0 && this->upper_bound_feet() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirspaceGeometryMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.AirspaceGeometryMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AirspaceGeometryMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AirspaceGeometryMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.AirspaceGeometryMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.AirspaceGeometryMessage)
    MergeFrom(*source);
  }
}

void AirspaceGeometryMessage::MergeFrom(const AirspaceGeometryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.AirspaceGeometryMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lateral_bounds()) {
    _internal_mutable_lateral_bounds()->::atc_proto::GeoPolygon::MergeFrom(from._internal_lateral_bounds());
  }
  if (!(from.lower_bound_feet() <= 0 && from.lower_bound_feet() >= 0)) {
    _internal_set_lower_bound_feet(from._internal_lower_bound_feet());
  }
  if (!(from.upper_bound_feet() <= 0 && from.upper_bound_feet() >= 0)) {
    _internal_set_upper_bound_feet(from._internal_upper_bound_feet());
  }
}

void AirspaceGeometryMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.AirspaceGeometryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirspaceGeometryMessage::CopyFrom(const AirspaceGeometryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.AirspaceGeometryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirspaceGeometryMessage::IsInitialized() const {
  return true;
}

void AirspaceGeometryMessage::InternalSwap(AirspaceGeometryMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AirspaceGeometryMessage, upper_bound_feet_)
      + sizeof(AirspaceGeometryMessage::upper_bound_feet_)
      - PROTOBUF_FIELD_OFFSET(AirspaceGeometryMessage, lateral_bounds_)>(
          reinterpret_cast<char*>(&lateral_bounds_),
          reinterpret_cast<char*>(&other->lateral_bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AirspaceGeometryMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AircraftMessage_Situation::InitAsDefaultInstance() {
  ::atc_proto::_AircraftMessage_Situation_default_instance_._instance.get_mutable()->location_ = const_cast< ::atc_proto::GeoPoint*>(
      ::atc_proto::GeoPoint::internal_default_instance());
}
class AircraftMessage_Situation::_Internal {
 public:
  static const ::atc_proto::GeoPoint& location(const AircraftMessage_Situation* msg);
};

const ::atc_proto::GeoPoint&
AircraftMessage_Situation::_Internal::location(const AircraftMessage_Situation* msg) {
  return *msg->location_;
}
AircraftMessage_Situation::AircraftMessage_Situation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monitoring_frequency_khz_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.AircraftMessage.Situation)
}
AircraftMessage_Situation::AircraftMessage_Situation(const AircraftMessage_Situation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monitoring_frequency_khz_(from.monitoring_frequency_khz_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  squawk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_squawk().empty()) {
    squawk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_squawk(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::atc_proto::GeoPoint(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&altitude_feet_msl_, &from.altitude_feet_msl_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_s_) -
    reinterpret_cast<char*>(&altitude_feet_msl_)) + sizeof(mode_s_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.AircraftMessage.Situation)
}

void AircraftMessage_Situation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AircraftMessage_Situation_atc_2eproto.base);
  squawk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_s_) -
      reinterpret_cast<char*>(&location_)) + sizeof(mode_s_));
}

AircraftMessage_Situation::~AircraftMessage_Situation() {
  // @@protoc_insertion_point(destructor:atc_proto.AircraftMessage.Situation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AircraftMessage_Situation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  squawk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void AircraftMessage_Situation::ArenaDtor(void* object) {
  AircraftMessage_Situation* _this = reinterpret_cast< AircraftMessage_Situation* >(object);
  (void)_this;
}
void AircraftMessage_Situation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AircraftMessage_Situation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AircraftMessage_Situation& AircraftMessage_Situation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AircraftMessage_Situation_atc_2eproto.base);
  return *internal_default_instance();
}


void AircraftMessage_Situation::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.AircraftMessage.Situation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monitoring_frequency_khz_.Clear();
  squawk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&altitude_feet_msl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_s_) -
      reinterpret_cast<char*>(&altitude_feet_msl_)) + sizeof(mode_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AircraftMessage_Situation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .atc_proto.GeoPoint location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float altitude_feet_msl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          altitude_feet_msl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_on_ground = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_on_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float flap_ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          flap_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float spoiler_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          spoiler_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gear_ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          gear_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nose_wheel_angle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          nose_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool landing_lights = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          landing_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool taxi_lights = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          taxi_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strobe_lights = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          strobe_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 monitoring_frequency_khz = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_monitoring_frequency_khz(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_monitoring_frequency_khz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transmitting_frequency_khz = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          transmitting_frequency_khz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string squawk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_squawk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.AircraftMessage.Situation.squawk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mode_c = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          mode_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mode_s = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          mode_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AircraftMessage_Situation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.AircraftMessage.Situation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atc_proto.GeoPoint location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // float altitude_feet_msl = 2;
  if (!(this->altitude_feet_msl() <= 0 && this->altitude_feet_msl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_altitude_feet_msl(), target);
  }

  // bool is_on_ground = 3;
  if (this->is_on_ground() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_on_ground(), target);
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_heading(), target);
  }

  // float pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float roll = 6;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_roll(), target);
  }

  // float flap_ratio = 7;
  if (!(this->flap_ratio() <= 0 && this->flap_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_flap_ratio(), target);
  }

  // float spoiler_ratio = 8;
  if (!(this->spoiler_ratio() <= 0 && this->spoiler_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_spoiler_ratio(), target);
  }

  // float gear_ratio = 9;
  if (!(this->gear_ratio() <= 0 && this->gear_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_gear_ratio(), target);
  }

  // float nose_wheel_angle = 10;
  if (!(this->nose_wheel_angle() <= 0 && this->nose_wheel_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_nose_wheel_angle(), target);
  }

  // bool landing_lights = 11;
  if (this->landing_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_landing_lights(), target);
  }

  // bool taxi_lights = 12;
  if (this->taxi_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_taxi_lights(), target);
  }

  // bool strobe_lights = 13;
  if (this->strobe_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_strobe_lights(), target);
  }

  // repeated int32 monitoring_frequency_khz = 14;
  {
    int byte_size = _monitoring_frequency_khz_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          14, _internal_monitoring_frequency_khz(), byte_size, target);
    }
  }

  // int32 transmitting_frequency_khz = 15;
  if (this->transmitting_frequency_khz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_transmitting_frequency_khz(), target);
  }

  // string squawk = 16;
  if (this->squawk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_squawk().data(), static_cast<int>(this->_internal_squawk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.AircraftMessage.Situation.squawk");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_squawk(), target);
  }

  // bool mode_c = 17;
  if (this->mode_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_mode_c(), target);
  }

  // bool mode_s = 18;
  if (this->mode_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_mode_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.AircraftMessage.Situation)
  return target;
}

size_t AircraftMessage_Situation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.AircraftMessage.Situation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 monitoring_frequency_khz = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->monitoring_frequency_khz_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _monitoring_frequency_khz_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string squawk = 16;
  if (this->squawk().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_squawk());
  }

  // .atc_proto.GeoPoint location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // float altitude_feet_msl = 2;
  if (!(this->altitude_feet_msl() <= 0 && this->altitude_feet_msl() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 6;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float flap_ratio = 7;
  if (!(this->flap_ratio() <= 0 && this->flap_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float spoiler_ratio = 8;
  if (!(this->spoiler_ratio() <= 0 && this->spoiler_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float gear_ratio = 9;
  if (!(this->gear_ratio() <= 0 && this->gear_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_on_ground = 3;
  if (this->is_on_ground() != 0) {
    total_size += 1 + 1;
  }

  // bool landing_lights = 11;
  if (this->landing_lights() != 0) {
    total_size += 1 + 1;
  }

  // bool taxi_lights = 12;
  if (this->taxi_lights() != 0) {
    total_size += 1 + 1;
  }

  // bool strobe_lights = 13;
  if (this->strobe_lights() != 0) {
    total_size += 1 + 1;
  }

  // float nose_wheel_angle = 10;
  if (!(this->nose_wheel_angle() <= 0 && this->nose_wheel_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 transmitting_frequency_khz = 15;
  if (this->transmitting_frequency_khz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transmitting_frequency_khz());
  }

  // bool mode_c = 17;
  if (this->mode_c() != 0) {
    total_size += 2 + 1;
  }

  // bool mode_s = 18;
  if (this->mode_s() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AircraftMessage_Situation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.AircraftMessage.Situation)
  GOOGLE_DCHECK_NE(&from, this);
  const AircraftMessage_Situation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AircraftMessage_Situation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.AircraftMessage.Situation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.AircraftMessage.Situation)
    MergeFrom(*source);
  }
}

void AircraftMessage_Situation::MergeFrom(const AircraftMessage_Situation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.AircraftMessage.Situation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monitoring_frequency_khz_.MergeFrom(from.monitoring_frequency_khz_);
  if (from.squawk().size() > 0) {
    _internal_set_squawk(from._internal_squawk());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::atc_proto::GeoPoint::MergeFrom(from._internal_location());
  }
  if (!(from.altitude_feet_msl() <= 0 && from.altitude_feet_msl() >= 0)) {
    _internal_set_altitude_feet_msl(from._internal_altitude_feet_msl());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.flap_ratio() <= 0 && from.flap_ratio() >= 0)) {
    _internal_set_flap_ratio(from._internal_flap_ratio());
  }
  if (!(from.spoiler_ratio() <= 0 && from.spoiler_ratio() >= 0)) {
    _internal_set_spoiler_ratio(from._internal_spoiler_ratio());
  }
  if (!(from.gear_ratio() <= 0 && from.gear_ratio() >= 0)) {
    _internal_set_gear_ratio(from._internal_gear_ratio());
  }
  if (from.is_on_ground() != 0) {
    _internal_set_is_on_ground(from._internal_is_on_ground());
  }
  if (from.landing_lights() != 0) {
    _internal_set_landing_lights(from._internal_landing_lights());
  }
  if (from.taxi_lights() != 0) {
    _internal_set_taxi_lights(from._internal_taxi_lights());
  }
  if (from.strobe_lights() != 0) {
    _internal_set_strobe_lights(from._internal_strobe_lights());
  }
  if (!(from.nose_wheel_angle() <= 0 && from.nose_wheel_angle() >= 0)) {
    _internal_set_nose_wheel_angle(from._internal_nose_wheel_angle());
  }
  if (from.transmitting_frequency_khz() != 0) {
    _internal_set_transmitting_frequency_khz(from._internal_transmitting_frequency_khz());
  }
  if (from.mode_c() != 0) {
    _internal_set_mode_c(from._internal_mode_c());
  }
  if (from.mode_s() != 0) {
    _internal_set_mode_s(from._internal_mode_s());
  }
}

void AircraftMessage_Situation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.AircraftMessage.Situation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AircraftMessage_Situation::CopyFrom(const AircraftMessage_Situation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.AircraftMessage.Situation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AircraftMessage_Situation::IsInitialized() const {
  return true;
}

void AircraftMessage_Situation::InternalSwap(AircraftMessage_Situation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monitoring_frequency_khz_.InternalSwap(&other->monitoring_frequency_khz_);
  squawk_.Swap(&other->squawk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AircraftMessage_Situation, mode_s_)
      + sizeof(AircraftMessage_Situation::mode_s_)
      - PROTOBUF_FIELD_OFFSET(AircraftMessage_Situation, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AircraftMessage_Situation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AircraftMessage::InitAsDefaultInstance() {
  ::atc_proto::_AircraftMessage_default_instance_._instance.get_mutable()->situation_ = const_cast< ::atc_proto::AircraftMessage_Situation*>(
      ::atc_proto::AircraftMessage_Situation::internal_default_instance());
}
class AircraftMessage::_Internal {
 public:
  static const ::atc_proto::AircraftMessage_Situation& situation(const AircraftMessage* msg);
};

const ::atc_proto::AircraftMessage_Situation&
AircraftMessage::_Internal::situation(const AircraftMessage* msg) {
  return *msg->situation_;
}
AircraftMessage::AircraftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.AircraftMessage)
}
AircraftMessage::AircraftMessage(const AircraftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_icao().empty()) {
    model_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_icao(),
      GetArena());
  }
  airline_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_airline_icao().empty()) {
    airline_icao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_airline_icao(),
      GetArena());
  }
  tail_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tail_no().empty()) {
    tail_no_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tail_no(),
      GetArena());
  }
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_call_sign().empty()) {
    call_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_call_sign(),
      GetArena());
  }
  if (from._internal_has_situation()) {
    situation_ = new ::atc_proto::AircraftMessage_Situation(*from.situation_);
  } else {
    situation_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:atc_proto.AircraftMessage)
}

void AircraftMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AircraftMessage_atc_2eproto.base);
  model_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airline_icao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&situation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&situation_)) + sizeof(id_));
}

AircraftMessage::~AircraftMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.AircraftMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AircraftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airline_icao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_no_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete situation_;
}

void AircraftMessage::ArenaDtor(void* object) {
  AircraftMessage* _this = reinterpret_cast< AircraftMessage* >(object);
  (void)_this;
}
void AircraftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AircraftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AircraftMessage& AircraftMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AircraftMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void AircraftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.AircraftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airline_icao_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tail_no_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  call_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && situation_ != nullptr) {
    delete situation_;
  }
  situation_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AircraftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_icao = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.AircraftMessage.model_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string airline_icao = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_airline_icao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.AircraftMessage.airline_icao"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tail_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tail_no();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.AircraftMessage.tail_no"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string call_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_call_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atc_proto.AircraftMessage.call_sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atc_proto.AircraftMessage.Situation situation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_situation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AircraftMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.AircraftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string model_icao = 2;
  if (this->model_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_icao().data(), static_cast<int>(this->_internal_model_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.AircraftMessage.model_icao");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_icao(), target);
  }

  // string airline_icao = 3;
  if (this->airline_icao().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airline_icao().data(), static_cast<int>(this->_internal_airline_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.AircraftMessage.airline_icao");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_airline_icao(), target);
  }

  // string tail_no = 4;
  if (this->tail_no().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tail_no().data(), static_cast<int>(this->_internal_tail_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.AircraftMessage.tail_no");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tail_no(), target);
  }

  // string call_sign = 5;
  if (this->call_sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_sign().data(), static_cast<int>(this->_internal_call_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atc_proto.AircraftMessage.call_sign");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_call_sign(), target);
  }

  // .atc_proto.AircraftMessage.Situation situation = 6;
  if (this->has_situation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::situation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.AircraftMessage)
  return target;
}

size_t AircraftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.AircraftMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_icao = 2;
  if (this->model_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_icao());
  }

  // string airline_icao = 3;
  if (this->airline_icao().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_airline_icao());
  }

  // string tail_no = 4;
  if (this->tail_no().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tail_no());
  }

  // string call_sign = 5;
  if (this->call_sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_sign());
  }

  // .atc_proto.AircraftMessage.Situation situation = 6;
  if (this->has_situation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *situation_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AircraftMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.AircraftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AircraftMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AircraftMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.AircraftMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.AircraftMessage)
    MergeFrom(*source);
  }
}

void AircraftMessage::MergeFrom(const AircraftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.AircraftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_icao().size() > 0) {
    _internal_set_model_icao(from._internal_model_icao());
  }
  if (from.airline_icao().size() > 0) {
    _internal_set_airline_icao(from._internal_airline_icao());
  }
  if (from.tail_no().size() > 0) {
    _internal_set_tail_no(from._internal_tail_no());
  }
  if (from.call_sign().size() > 0) {
    _internal_set_call_sign(from._internal_call_sign());
  }
  if (from.has_situation()) {
    _internal_mutable_situation()->::atc_proto::AircraftMessage_Situation::MergeFrom(from._internal_situation());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AircraftMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.AircraftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AircraftMessage::CopyFrom(const AircraftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.AircraftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AircraftMessage::IsInitialized() const {
  return true;
}

void AircraftMessage::InternalSwap(AircraftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_icao_.Swap(&other->model_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airline_icao_.Swap(&other->airline_icao_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tail_no_.Swap(&other->tail_no_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  call_sign_.Swap(&other->call_sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AircraftMessage, id_)
      + sizeof(AircraftMessage::id_)
      - PROTOBUF_FIELD_OFFSET(AircraftMessage, situation_)>(
          reinterpret_cast<char*>(&situation_),
          reinterpret_cast<char*>(&other->situation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AircraftMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaxiPathMessage::InitAsDefaultInstance() {
}
class TaxiPathMessage::_Internal {
 public:
};

TaxiPathMessage::TaxiPathMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:atc_proto.TaxiPathMessage)
}
TaxiPathMessage::TaxiPathMessage(const TaxiPathMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_ids_(from.edge_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_node_id_, &from.from_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_node_id_) -
    reinterpret_cast<char*>(&from_node_id_)) + sizeof(to_node_id_));
  // @@protoc_insertion_point(copy_constructor:atc_proto.TaxiPathMessage)
}

void TaxiPathMessage::SharedCtor() {
  ::memset(&from_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_node_id_) -
      reinterpret_cast<char*>(&from_node_id_)) + sizeof(to_node_id_));
}

TaxiPathMessage::~TaxiPathMessage() {
  // @@protoc_insertion_point(destructor:atc_proto.TaxiPathMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaxiPathMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaxiPathMessage::ArenaDtor(void* object) {
  TaxiPathMessage* _this = reinterpret_cast< TaxiPathMessage* >(object);
  (void)_this;
}
void TaxiPathMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaxiPathMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaxiPathMessage& TaxiPathMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaxiPathMessage_atc_2eproto.base);
  return *internal_default_instance();
}


void TaxiPathMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atc_proto.TaxiPathMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_ids_.Clear();
  ::memset(&from_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_node_id_) -
      reinterpret_cast<char*>(&from_node_id_)) + sizeof(to_node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaxiPathMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 edge_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_edge_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaxiPathMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atc_proto.TaxiPathMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_node_id = 1;
  if (this->from_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_node_id(), target);
  }

  // int32 to_node_id = 2;
  if (this->to_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to_node_id(), target);
  }

  // repeated int32 edge_ids = 3;
  {
    int byte_size = _edge_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_edge_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atc_proto.TaxiPathMessage)
  return target;
}

size_t TaxiPathMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atc_proto.TaxiPathMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 edge_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->edge_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edge_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 from_node_id = 1;
  if (this->from_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_node_id());
  }

  // int32 to_node_id = 2;
  if (this->to_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaxiPathMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atc_proto.TaxiPathMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TaxiPathMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaxiPathMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atc_proto.TaxiPathMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atc_proto.TaxiPathMessage)
    MergeFrom(*source);
  }
}

void TaxiPathMessage::MergeFrom(const TaxiPathMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atc_proto.TaxiPathMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_ids_.MergeFrom(from.edge_ids_);
  if (from.from_node_id() != 0) {
    _internal_set_from_node_id(from._internal_from_node_id());
  }
  if (from.to_node_id() != 0) {
    _internal_set_to_node_id(from._internal_to_node_id());
  }
}

void TaxiPathMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atc_proto.TaxiPathMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaxiPathMessage::CopyFrom(const TaxiPathMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atc_proto.TaxiPathMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaxiPathMessage::IsInitialized() const {
  return true;
}

void TaxiPathMessage::InternalSwap(TaxiPathMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_ids_.InternalSwap(&other->edge_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaxiPathMessage, to_node_id_)
      + sizeof(TaxiPathMessage::to_node_id_)
      - PROTOBUF_FIELD_OFFSET(TaxiPathMessage, from_node_id_)>(
          reinterpret_cast<char*>(&from_node_id_),
          reinterpret_cast<char*>(&other->from_node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaxiPathMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace atc_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_Connect* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_QueryAirport* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_QueryAirport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_QueryAirport >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_QueryTaxiPath* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_QueryTaxiPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_QueryTaxiPath >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_CreateAircraft* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_CreateAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_CreateAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_UpdateAircraftSituation* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_UpdateAircraftSituation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_UpdateAircraftSituation >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_RemoveAircraft* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_RemoveAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_RemoveAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_UserAcquireAircraft* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_UserAcquireAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_UserAcquireAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_UserUpdateAircraftSituation* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_UserUpdateAircraftSituation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_UserUpdateAircraftSituation >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_UserReleaseAircraft* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_UserReleaseAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_UserReleaseAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_UserPttPressed* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_UserPttPressed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_UserPttPressed >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_UserPttReleased* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_UserPttReleased >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_UserPttReleased >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_QueryTraffic* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_QueryTraffic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_QueryTraffic >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer_CancelTrafficQuery* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer_CancelTrafficQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer_CancelTrafficQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ClientToServer* Arena::CreateMaybeMessage< ::atc_proto::ClientToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ClientToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_FaultDeclined* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_FaultDeclined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_FaultDeclined >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_FaultNotFound* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_FaultNotFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_FaultNotFound >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_ReplyConnect* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_ReplyConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_ReplyConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_ReplyCreateAircraft* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_ReplyCreateAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_ReplyCreateAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_ReplyQueryAirport* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_ReplyQueryAirport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_ReplyQueryAirport >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_ReplyQueryTaxiPath* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_ReplyQueryTaxiPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_ReplyQueryTaxiPath >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_ReplyQueryTraffic* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_ReplyQueryTraffic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_ReplyQueryTraffic >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_NotifyAircraftCreated* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_NotifyAircraftCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_NotifyAircraftCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_NotifyAircraftSituationUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_NotifyAircraftRemoved* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_NotifyAircraftRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_NotifyAircraftRemoved >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient_ReplyUserAcquireAircraft* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient_ReplyUserAcquireAircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient_ReplyUserAcquireAircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ServerToClient* Arena::CreateMaybeMessage< ::atc_proto::ServerToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ServerToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::GeoPoint* Arena::CreateMaybeMessage< ::atc_proto::GeoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::GeoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::GeoPolygon_GeoEdge* Arena::CreateMaybeMessage< ::atc_proto::GeoPolygon_GeoEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::GeoPolygon_GeoEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::GeoPolygon* Arena::CreateMaybeMessage< ::atc_proto::GeoPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::GeoPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::Vector3dMessage* Arena::CreateMaybeMessage< ::atc_proto::Vector3dMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::Vector3dMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::AttitudeMessage* Arena::CreateMaybeMessage< ::atc_proto::AttitudeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::AttitudeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::AirportMessage* Arena::CreateMaybeMessage< ::atc_proto::AirportMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::AirportMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::RunwayMessage_End* Arena::CreateMaybeMessage< ::atc_proto::RunwayMessage_End >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::RunwayMessage_End >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::RunwayMessage* Arena::CreateMaybeMessage< ::atc_proto::RunwayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::RunwayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::TaxiNodeMessage* Arena::CreateMaybeMessage< ::atc_proto::TaxiNodeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::TaxiNodeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix* Arena::CreateMaybeMessage< ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::TaxiEdgeMessage_ActiveZoneMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::TaxiEdgeMessage* Arena::CreateMaybeMessage< ::atc_proto::TaxiEdgeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::TaxiEdgeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::ParkingStandMessage* Arena::CreateMaybeMessage< ::atc_proto::ParkingStandMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::ParkingStandMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::AirspaceGeometryMessage* Arena::CreateMaybeMessage< ::atc_proto::AirspaceGeometryMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::AirspaceGeometryMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::AircraftMessage_Situation* Arena::CreateMaybeMessage< ::atc_proto::AircraftMessage_Situation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::AircraftMessage_Situation >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::AircraftMessage* Arena::CreateMaybeMessage< ::atc_proto::AircraftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::AircraftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::atc_proto::TaxiPathMessage* Arena::CreateMaybeMessage< ::atc_proto::TaxiPathMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atc_proto::TaxiPathMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
